
@@ MySQL 


! 데이터베이스 구성요소

-> 테이블, 레코드 필드로 구성됨.


! MySQL 설치

# rpm -qa | grep mysql
# yum -y install mysql mysql-server

# vi /etc/my.cnf                             -> 환경 설정파일

# service mysqld {start|stop|restart|status} -> 프로세스 실행

# chkconfig --level 35 mysqld on             -> runlevel 조정


! mysql 접속 및 관리자 패스워드 설정.

-> mysql 클라이언트를 이용하여 MYSQL접속을 하게됨.

# mysql                            -> 처음 mysql 접속

mysql> show databases;             -> db 목록 확인
mysql> use mysql;                  -> db 선택

mysql> update user set password=password('root123') where user='root';  
-> user 테이블의 user 필드값이 'root'인 레코드의 패스워드값을 지정.
-> 즉, 특정사용자(root)의 패스워드를 password() 함수를 이용하여 설정.
-> 이때 update는 칼럼의 값을 변경시키는 쿼리임.
mysql> flush privileges;
-> insert, delete, update문을 이용하여 MySQL 사용자의
   추가, 삭제 및 권한 변경하였을때 변경사항을 적용하기 위해 실행.

mysql> quit                        -> 접속 종료

# mysql -u [mysql_user_name] -p [database_name]
1) mysql           -> mysql DB로 접속하기위한 mysql 클라이언트 프로그램.
2) -u              -> 접속할 mysql 사용자명을 지정하기 위한 옵션
3) mysql_user_name -> mysql 사용자명
4) -p              -> 패스워드를 입력하기 위한 옵션
5) database_name   -> 접속 후 사용할 DB 명

# mysql -u root -p mysql           -> 패스워드 인증 후 접속
Enter password:

mysql> show tables;                -> mysql데이터베이스의 테이블 보기
mysql> show columns from db;       -> 테이블의 필드 정보 확인

mysql> create database my_db;      -> db생성
mysql> drop database my_db;        -> db삭제
mysql> exit                        -> 접속 종료


! 사용자 추가

-> 사용자 추가시 사용자에 따라 필요한 권한을 부여함.

# mysql -u root -p mysql
Enter password:

mysql> create database my_db;      -> db생성

mysql> insert into user (host,user,password)
    -> values('localhost','user1',password('user123'));
-> 계정,패스워드등록.
-> localhost의 user1이라는 사용자가 user123라는 암호와 모든
   권한으로 추가 됨. 주고 싶지 않은 권한은 'N'으로 하면 됨.
mysql> select host,user,password from user;
-> user사용자 테이블의 정보를 본다
mysql> grant all privileges on *.* to user1@localhost
    -> identified by 'user123' with grant option;

-> 사용자 추가는 INSERT외에 GRANT를 이용해도 됨.
   localhost의 user1사용자가 user123라는 암호로 모든 권한을
   갖는다는 것을 나타냄.

mysql> grant select,insert,update,delete,create,drop
    -> on my_db.* to user2@localhost
    -> identified by 'user123';

mysql> flush privileges;
-> 권한이 바뀌면 flush명령을 이용하여 시스템에 적용해야 함.

mysql> drop user 'user1'@'localhost';  -> 사용자 삭제.

# mysql -u user1 -p my_db
Enter password:
-> MYSQL의 user1이라는 일반사용자가 my_db라는 자신 소유의 DB접속.

# mysql -u user1 -puser123 my_db
-> 패스워드까지 지정하여 접속.


! Database 만들기

-> 슈퍼마켓에서 사용될 수 있는 데이터베이스를 예로 들어 설명함.

mysql> create database super;
mysql> use super;                  -> super 데이터베이스 사용하기.
mysql> show databases;             -> 현재 설치되어있는 DB 출력.


! Table 생성

-> 다음을 바탕으로 테이블 생성.

-> 슈퍼마켓에서 파는 물품정보이며 물품종류별
   코드, 제품명, 금액, 재고, 납품받은 공급업체명으로 구성됨.

mysql> create table item(code int primary key, name varchar(20),
-> cost int, jaego int, dome_name varchar(30));


mysql> show tables;          -> 생성된 Table 확인.
+-------------------
| Tables in super  |
+------------------+
| item
+------------------+

-> VARCHAR는 문자열의 크기만 사용을 하므로 차지하는 용량을 
   줄일 수 있음. 그러나 CHAR를 이용하는것보다 속도가 느릴 수 있음.
-> PRIMARY KEY는 그 칼럼의 값이 두개의 레코드에서 같은 값을
   가질 수 없음을 의미. 예를 들어 학번, 주민번호, 상품코드와
   같은 것은 레코드마다 유일하므로 PRIMARY로 함.
-> AUTO_INCREMENT는 레코드를 삽입할 때마다 칼럼의 값을
   자동으로 하나씩 증가시켜줌. 게시판에서 게시물 추가시 유용함.

mysql> show columns from item -> item 테이블의 칼럼 정보 출력.


! 레코드 삽입(INSERT)

-> 테이블에 데이터 입력하는 SQL 명령은 INSERT 임.
-> item 테이블에 데이터 입력.

mysql> insert into item VALUES('01','초코파이',300,1000,'kt');
mysql> insert into item VALUES('02','코카콜라',500,150,'lg');
mysql> insert into item VALUES('03','신라면',600,230,'sk');

-> MySQL은 테이블이름은 대소문자 구분하지만 칼럼은 구분하지 않음.

-> 위를 반복하여 item 테이블에 여러개의 레코드 삽입하면 됨.

! 테이블 내용 확인(SELECT)
mysql> select * from item;
-> super 테이블의 내용확인

! 레코드 삭제(DELETE)

mysql> delete from item where name='초코파이';
-> 지정된 레코드 삭제

! 레코드 수정(UPDATE)

mysql> update item SET cost=400 where name='초코파이';
-> 레코드의 내용을 수정할 경우 update를 이용.
-> 초코파이와 일치하는 레코드를 찾아 cost 값을 400으로 수정.


! 테이블 수정(ALTER)

mysql> alter table item add date varchar(20) after code;
-> item 테이블에서 id 필드다음에 날짜필드 추가.
-> 맨마지막에 추가할 경우 순서를 입력하지 않음.

mysql> alter table item modify name varchar(30);
-> item 테이블의 name 필드 타입을 varchar(30)으로 수정.

mysql> alter table item change dome_name supplier;
-> item 테이블의 dome_name 필드명을 supplier로 수정.

! 테이블 삭제(DROP)

mysql> drop table item;

! SELECT

-> 테이블에서 레코드를 선택하여 조건에 의해 레코드의 내용을
   리턴해 주는 SQL 명령어임.

mysql> SELECT * from item;
+---------------------------------------------+
|id     | name   |  cost |  remain | dome_name|
+-------+--------+-------+----------+---------+
|pie01  |초코파이|  300  |  1000    | kt      |
|col01  |코카콜라|  500  |   150    | lg      |
|myeon01|신라면  |  600  |   230    | sk      |
+-------+--------+-------+----------+---------+


mysql> SELECT * FROM export;
+---------------------------------------------
no  |name | how_many  | how_much   | when
+-------------------------------------------
| 1 |코카콜라| 23   |            |2014-06-30|
| 2 |코카콜라| 10  |             |2014-06-30|
| 3
| 4


mysql> SELECT * from item WHERE when ='2014-06-30';
-> 특정일에 판매된 품목만 확인하고자 하면 WHERE 뒤에
   조건을 붙이면 됨.

mysql> SELECT SUM(cost) FROM item;
-> 전체 금액의 합을 보고자 할때 사용함. SUM(expr)은
   expr의 합을 리턴하게 됨. 
   2014-06-30의 판매액을 보려면 WHERE when='2014-06-30'을 추가.

mysql> SELECT SUM(cost) FROM item WHERE name='신라면' AND when='2016-06-30';
-> 두가지의 조건식에 대한 조회도 가능함. AND 혹은 && 연산자 사용.

mysql> SELECT * FROM item WHERE how_much >=10000;
-> 비교연산자 사용. 판매액이 10000원 이상인 상품만 보고자 할 경우임.

mysql> SELECT * FROM item ORDER BY cost DESC;
-> sort도 가능함. 판매액이 가장 많은 순으로 정렬.
   DESC는 내림차순, ACS는 올림차순임.


! 파일로부터 레코드 입력받기


! 결과를 파일로 저장하기


! 기타



@@ PHP & MySQL

# yum -y install php-mysql
-> 연동에 필요한 패키지 설치.
-> php와 MySQL 연동은 mysql_connect 함수를 사용.

1) 접속함수 이용하여 연결
<접속함수>
-> resource mysql_connect(string hostname[:port],
   string username,string password);

<종료함수>
-> bool mysql_close(resource link_identifier);

<예제>
# vi connect.php
<?php
	echo "<H2> mysql_connect mysql_close Function </H2>";
	$connect=mysql_connect("192.168.0.10","user10","user123")
		or die("Connect Failed");
	echo "Connect Success<br>";
	echo "$connect<br>";

	mysql_close($connect);
	echo "Connect Quit";
?>

-> 로컬클라이언트일 경우 ip주소는 localhost 또는 127.0.0.1
-> 외부클라이언트일 경우 ip주소는 서버의 ip주소.

# vi 

2) 데이터베이스 선택 연결
-> bool mysql_select_db(string database_name, resource link_identifier);

<예제>
# vi super.php
<?php
	$connect=mysql_connect("localhost","user10","user123");
	$db_con=mysql_select_db("super",$connect);

	if (!$db_con)
	{
		echo "super Database Select Failed";
		exit(0);
	}
	else
	{
		echo "super Database Select Success";
	}
	mysql_close($connect);
?>



3) DB연결 후 테이블 생성 및 레코드 입력
resource mysql_query(string query, resource link_identifier);
-> 함수를이용한 sql 명령어 실행.

<예제>

# vi /var/www/html/mydb_tab.php
<?php
        $connect=mysql_connect("localhost","user100","user123"); 
        $db_con=mysql_select_db("my_db", $connect);
        $sql="create table client (";
        $sql=$sql."name CHAR(12) NOT NULL,";
        $sql=$sql."id CHAR(12) NOT NULL,";
        $sql=$sql."email VARCHAR(40),";
        $sql=$sql."sex VARCHAR(4) NOT NULL,";
        $sql=$sql."point INT,";
        $sql=$sql."grade VARCHAR(2),";
        $sql=$sql."PRIMARY KEY(id))";
        $result=mysql_query($sql, $connect);
        if(!$result)
        {       echo "client table create failed<br>";
                exit(0);
        }
        else
                echo "client table create success<br>";
        $sql="Insert into client values";
        $sql=$sql."('홍길동', 'hgd', 'hgd@gmail.com', '남', 30, 90)";
        $result=mysql_query($sql, $connect);
        if(!$result)
        {
                echo "record insert failed";
                exit(0);
        }
        else
                echo "record insert success";
        mysql_close();
?>















