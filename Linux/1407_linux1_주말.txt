<1일> 실습환경 구축
      LINUX 소개
      시스템종료와 재부팅
      Basic Command

<2일> 외부접속관련 명령어
      VI Editor

<3일> 리눅스 디렉토리 관리
      시스템 사용자 계정 관리

<4일> 파일시스템의 퍼미션 및 소유권

<5일> 리눅스 파일시스템

<6일> 부트로더 GRUB
      INIT 프로세스
      압축/묶음 명령어

<7일> 소프트웨어 추가/설치
      리눅스 시스템 자동화 - Cron
      Linux Porcess 관리
      Background & Foreground

<8일> QUOTA -> 디스크 사용량 할당
      Shell
      로그인 정보 로그관련 명령어
      원격접속 방법 -> telnet, ssh

[1]

@@ 실습환경구축

1. VM: VMware Workstation
-> www.vmware.com/download

2. OS: CentOS
-> www.centos.org -> Get centos now -> mirror-status.centos.org -> kr -> ......-> CentOS-6.5-x86_64-bin-DVE1to2.torrent

-> utorrent 설치필요

3. 외부접속프로그램: puTTy
-> www.putty.nl -> download -> putty.exe

@@ OS 설치

@@ Linux 특징
-> 공개형 오픈소스 운영체제
-> 유닉스와 호환가능
-> 다중사용자 환경 지원
-> 다중작업 환경 지원
-> 강력한 네트워크 운영체제
-> 플랫폼에 구애없는 설치지원

@@ 시스템 종료와 재부팅

# shutdown -h now -> 시스템 종료
# shutdown -h +20 "The system will shutdown in 20minutes"
# shutdown -r -> 리부팅
# shutdonw -c -> 예약된 shutdown 취소

# halt   -> 시스템 종료
# reboot -> 리부팅

# init [0~6] -> runlevel을 이용해서 부팅모드 지정
0 -> halt
1 -> single user mode
2 -> multi user mode, non NFS, non GUI
3 -> multi user mode, non GUI
4 -> not used
5 -> multi user mode
6 -> reboot mode

# telinit [0~6] -> init과 동일

@@ Basic command

# man [option] <command> -> 명령어에 대한 도움말 출력
-a  -> section 별 모든 설명서 출력
<space> -> 페이지단위로 스크롤
<d> -> 반페이지 이동
<b> -> 페이지단위로 이전페이지로 이동
<q> -> quit

# uname -> 시스템에 대한 정보 출력
-a -> 모든 정보 출력
-m -> 하드웨어 타입
-n -> hostname
-r -> 운영체제 release
-s -> 운영체제 name
# date -> 시스템 날짜정보 설정 및 출력
# date [MMDDhhmmYY] 

# cal -> 현재 월에 해당하는 달력 정보 출력
YYYY -> 해당 년도의 1년의 달력 정보 출력

# hwclock -> 하드웨어 시간 동기화
-r -> 하드웨어 현재시간 출력
-s -> 하드웨어 시간을 현재시간(OS)에 동기화
-w -> 시스템시간(OS)을 하드웨어에 동기화

# rdate -> ntp(network time protocol)에 의해 시간동기화
-p -> ntp서버의 현재시간 확인 (time.bora.net)
-s -> ntp서버을 시스템 시간에 동기화

# pwd -> print working directory 경로 출력

# cd -> change directory 
# cd -> 로그인 사용자의 홈디렉토리로 이동
# cd ~ -> 로그인 사용자의 홈디렉토리로 이동
# cd ~[user_name] -> 특정사용자의 홈디렉토리로 이동
.  -> 자기자신의 디렉토리
.. -> 상위 디렉토리
~  -> 홈 디렉토리


[2]

# ls -> 파일/디렉토리 list 출력
-a -> 모든 파일 리스트 출력(숨김파일포함)
-l -> long type 으로 출력
-d -> 디렉토리 속성값 출력
-n -> id 값 출력
-i -> i-node 출력
-F -> 파일 유형 출력
-R -> Recursive (하위경로포함)

# logname -> 시스템에 로그인한 사용자명 출력

# which   -> PATH에 있는 명령어의 절대경로
# whereis -> PATH에 있는 명령어의 절대경로 및 man page 경로
# whatis  -> man page의 간략한 설명

# arch -> 시스템 cpu 에 대한 정보 출력

# clear -> 화면 정리

# echo [문자열] -> 입력문자열을 표준출력장치에 출력

# history -> 사용했던 명령어 목록 출력
# history <n>  -> n 만큼의 목록 출력
!<n> -> n번째 명령어 재사용
!!   -> 직전 명령어 재사용
Up&Down key 를 이용해서 이전 사용했던 명령어 재사용

# alias -> 별칭
# alias -> 별칭되어있는 정보 출력
# alias c='clear'




@@ 접속관련명령어

# id [user_name] -> 사용자 정보 확인

# w -> 접속한 사용자 정보 확인

# who [option] -> 시스템에 로그인한 사용자 정보 확인
-w -> write 사용가능 여부 확인

# write <user_name> [dev_name] -> 문자메시지 전달 가능.

# whoami -> 로그인 한 자신이 누구인지 확인

# who am i -> 로그인 한 자신이 누구인지 확인

# users -> 현재 접속한 사용자들의 사용자 ID 확인

# wall -> 로그인 한 모든 사용자에게 메시지 전송


@@ VI Editor

-> 대기모드 -> esc
-> 편집모드 -> i,I,a,A,o,O,r,R,s,S
-> 실행모드 -> :,/,?

! 커서 이동 방법 -> 반드시 대기모드상태에서 수행.
h -> 좌
j -> 하
k -> 상
l -> 우

0 -> 라인의 첫 칼럼으로 이동
$ -> 라인의 마지막 칼럼으로 이동

w -> word 단위로 이동(forward)
b -> word 단위로 이동(back)

gg   -> 첫 라인으로 이동
G    -> 마지막 라인으로 이동
<n>G -> n 라인으로 이동
:<n> -> n 라인으로 이동


Ctrl+f -> 페이지단위로 이동(앞)
Ctrl+d -> 반페이지단위로 이동
Ctrl+b -> 페이지단위로 이동(뒤)

x     -> 현재 커서에 있는 문자 삭제
dd    -> 현재 커서가 있는 라인 복사 및 삭제
<n>dd -> 커서가 있는 라인부터 n라인 복사 및 삭제
yy    -> 현재 커서가 있는 라인 복사
<n>yy -> 커서가 있는 라인부터 n라인 복사

p -> 현재 커서 밑으로 paste
P -> 현재 커서 위로 paste
u -> undo(이전 작업 취소)


! 편집모드

i -> insert
I -> Insrt
a -> append
A -> Append
o -> open
O -> Open
r -> replace
R -> Replace
s,S -> ?

. -> 마지막 작업 재 수행
cw -> word 단위로 치환


! 실행모드

: -> w(write), q(quit), wq(=x), w!, q!, wq!(!-> force)
     !bash, !<command>, r !<command>  (! -> shell)
     r <filename>, w <filename>
     %s/old/new/g (old -> new 문자열로 모두 치환) 
     set nu, set nonu, set list, set nolist, set ts=<n>
/ -> 문자열 검색(<n> -> 정방향으로 다음 문자열 검색)
? -> 문자열 검색(<n> -> 역방향으로 다음 문자열 검색)

! 파일오픈
# vi [file_name]

! 다중파일오픈
# vi [file1] [file2] [file3]
:<n/N> -> 다음 파일로 이동
:args  -> 현재 편집중인 파일 확인

[실습]
/test 디렉토리가 존재한다면 먼저 다음을 수행.
1. # rm -rf  /test
2. 최상위디렉토리에 test 디렉토리 생성하시오.
3. /test 디렉토리로 이동하시오.
4. root사용자의 home 디렉토리에 있는 install.log 파일을
   /test 디렉토리에 install.txt 이름으로 복사하시오.

5. vi로 install.txt 파일을 오픈한 상태에서 파일이름을
   temp.txt 파일명으로 저장하시오.

6. 현재 커서가 첫번째 라인에 위치해 있을때
   'filesystem'단어를 찾기위한 입력키 순서를 작성하시오.

7. 커서를 문서의 처음, 마지막, 그리고 500번째 라인 으로 이동하는 입력키를 쓰시오.

8. 커서가 위치한 라인을 삭제 후 복원(또는 취소)하는 과정을 작성하시오

9. 커서가 위치한 라인부터 5줄을 복사한 후 문서 끝에 첨부하는 과정을 작성하시오.

10. 파일에서 'common' 문자열을 'Visual Editor Test' 문자열로 치환하는 과정을 작성하시오.

11. 현재의 vi 작업화면을 수평으로 분할하여 2개의 vi 화면으로 만드시오.

12. 분할된 두번째 화면으로 이동하여 temp.txt 파일을 읽어 들이시오.
13. 저장후 vi를 종료하시오.



! 네트워크 인터페이스 환경설정

# ifconfig -> 현재 인터페이스 설정값 확인
# ls /etc/sysconfig/network-scripts
# vi /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
TYPE=Ethernet
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=dhcp  -> 동적 ip 설정
#BOOTPROTO=static  -> 고정 ip 설정
#IPADDR=192.168.31.100
#GATEWAY=192.168.31.1
#DNS1=168.126.63.1
~
~
:wq

# service network restart -> 설정값 적용

















@@ 리눅스 디렉토리 관리

-> 최상위 디렉토리인 '/'를 기준으로 Tree 모양의 계층 구조.
-> 최상위 디렉토리를 root라 부르고 '/'로 표시.

! 디렉토리 표현 방식(경로)
절대경로표현방식 -> 최상위디렉토리를 기준으로 경로를 표현
상대경로표현방식 -> 현재디렉토리를 기준으로 경로를 표현

! 리눅스 OS 주요 디렉토리
/    -> OS 구성의 모든 파일의 최상위에 위치하는 최상위 디렉토리
/bin  -> 일반사용자들이 사용할 수 있는 명령어 
/boot -> 커널이미지 등 부팅과 관련된 파일
/dev  -> 장치(device) 파일
/etc  -> 시스템과 프로그램의 환경 설정 파일
/home -> 일반 사용자들의 홈디렉토리로 사용
/lib  -> 프로그램 실행시 필요한 라이브러리
/proc -> 실행중인 프로세스 정보와 cpu, memory 등의 시스템 정보가
        가상파일로 저장.
/root -> root 계정(관리자)의 홈디렉토리
/sbin -> 시스템 관리자용 명령어
/usr  -> 일반 사용자들을 위한 대부분의 프로그램
/var  -> log 파일등 수시로 업데이트되는 가변 저장파일이 위치
/lost+found -> 파일시스템에만 존재하며 파일시스템 복구시 활용
/tmp  -> 모든 사용자를 위한 임시 저장장소

! 리눅스 파일 유형
- -> 일반파일
d -> 디렉토리
l -> 링크파일
b -> block device, 블록단위로 입출력
c -> character device, 캐릭터 단위로 입출력
s -> socket
p -> pipe

! I-node
-> 파일을 기술하는 디스크상의 데이터 구조로서 파일의 데이터 블록이
   디스크 상의 어디에 위치하고 있는지와 같은 중요한 정보를 갖고 있음.
-> 파티션마다 0부터 시작하는 정수 형태를 갖음.
-> 해당 파일에 대한 대부분의 속성 정보를 갖음.

! I-node의 내용
-> 파일의 소유권 및 접근 허가권한
-> 파일 내용이 들어있는 디스크 내의 물리적 주소(Pointer)
-> 파일의 링크 수
-> 파일의 형태
-> 파일의 크기
-> 파일 생성 시기
-> 파일 마지막 접근시기(a)
-> 파일 마지막 수정시기(c)

! 파일의 생성/삭제
생성-> 새로운 파일이 생성되면 그에 해당하는 inode가 생성되어 inode blk에
       저장되는데 그에 해당되는 번호를 inode number라 함.
삭제-> 파일 삭제를 하게되면 해당파일의 inode 링크수가 감소되고 링크수가
       0가 되면 데이터 블록은 free가 되며 inode또한 dellocate 상태가 됨.





















! 링크(Hard Link)

-> hard link 특징.....
1) 동일한 i-node 값을 갖는다
2) 링크카운트가 증가함.
3) 서로다른 파일시스템에서는 구현 불가.
4) 데이터영역을 사용하지 않음.

# ln [source] [target] -> hard link 파일 생성
# ls -il

! 링크(Soft Link or Symbolic Link)

-> soft link(symbolic link)특징.....
1) 윈도우의 바로가기와 비슷한 개념
2) 서로다른 파일시스템에서도 링크가 가능
3) 서로다른 i-node 값을 갖음.
4) 링크카운트는 증가하지 않음.
5) 데이터 영역의 일정 영역을 사용한다.
6) 디렉토리에도 링크 설정 가능.
7) 파일의 유형이 'ㅣ'로 표시됨.

# ln -s [source] [target] -> soft(symbolic) link 파일 생성
# ls -il


! 리눅스 파일/디렉토리 관리 명령어

# mkdir [option] [dir_name] -> 지정한 디렉토리 생성
-p -> path(경로)가 있는 디렉토리 생성, 상위디렉토리부터 생성함.

# rmdir [option] [dir_name] -> 지정한 디렉토리 삭제(비어있어야함)
-p -> path(경로)가 있는 디렉토리 삭제, 상위디렉토리까지 삭제.

# file [file_name] -> 지정한 파일의 유형을 확인. /usr/share/magic

# cat [file_name] -> 파일 내용출력
# cat [option] [file_name]
-n -> 라인의 번호를 붙여서 출력
-b -> -n옵션과 동일하지만 공백라인은 제외하고 출력

# cat > [file_name] -> 파일 생성. Ctrl+D 를 이용하여 저장.
# cat >> [file_name] -> 파일에 내용 추가.

# nl [file_name] -> 라인의 번호를 붙여서 출력

# head [file_name] -> 기본값에 의해 파일의 첫라인부터 10라인 출력
# head <-n> [file_name] -> 첫라인부터 n개 라인 출력

# tail [file_name] -> 기본값에 의해 파일의 마지막라인부터 10라인 출력
# tail <-n> [file_name] -> 마지막 라인부터 n개 라인 출력
-f -> 실시간으로 추가되는 파일 내용 확인.

# more [file_name] -> 페이지 단위로 내용 출력
<space>  -> 다음페이지
<enter>  -> 다음라인
v        -> vi mode
b        -> 이전페이지
d        -> 반페이지
q        -> 종료

# less [file_name] -> 페이지 단위로 내용 출력
<space>  -> 다음페이지
<enter>  -> 다음라인
v        -> vi mode
b        -> 이전페이지
d        -> 반페이지
q        -> 종료

# touch [file_name] -> 크기가 0 byte 인 파일생성.
-> 기존에 파일이 존재하면 시간정보를 갱신.
# touch [option] [file_name]
-t [yyyyMMDDhhmm] -> 파일 생성날짜를 임의의 날짜로 변경.

# rm [file_name] -> 파일 삭제
# rm [option] [file_name]
-i -> 대화형(interactive)
-f -> 강제(force)
-r -> 하위디렉토리까지(recursive)

# cp [source] [target] -> source를 target 파일명으로 복사
# cp [option] [source] [target]
-a -> 원래 파일의 퍼미션 등 속성값 보존
-b -> 백업파일 생성
-f -> 복사할 파일명이 겹치면 강제로 복사
-i -> 파일이름이 겹치면 물어봄
-l -> 하드링크 생성
-p -> 퍼미션 등 속성값 보존
-s -> 심볼릭링크 생성
-R,r -> 하위 디렉토리까지 복사

# mv [source] [target] 
-> source파일을 target 파일이름으로 변경.
-> target이 서로다른 경로일 경우 soruce 파일은 이동됨.
# mv [option] [source] [target]
-f -> force
-i -> interative

# wc [file_name] -> 파일의 라인,단어,문자갯수 등의 통계정보 출력
# wc [option] [file_name]
-l -> 라인수
-w -> 단어수
-c,m -> 문자수

# find -> 파일 찾기
# find [dir] [option] -> 지정한 dir에서 옵션에따른 파일명 검색
-empty -> 빈파일
-uid   -> 사용자ID
-gid   -> 그룹ID
-user  -> 사용자이름
-group -> 그룹이름
-name  -> 파일명으로 찾을때
-perm  -> 권한으로 찾을때
-type  -> 파일 유형( f, d, c, b, s, p)
-atime -> access time, 파일에 접근한 시간을 기준으로 검색
          (cat, more, head, tail, vi), # ls -lu
-ctime -> change time, 파일의 속성값이 변경된 시간을 기준으로 검색
          (퍼미션, 소유권 정보변경),  # ls -lc
-mtime -> modify time, 파일 생성, 이동(mv, cp, touch), # ls -l
-size  -> 파일의 크기

# find [dir] [option] [action]
-print                 -> 리스트 출력
-exec <command> {} \;  -> 지정한 명령어 수행
-ok <command>  {} \;   -> 명령 적용전에 물어봄

# grep [검색문자열] [file_name] -> 지정한 파일에서 찾고자 하는 문자열이
                                    포함된 라인 출력
# grep [option] [검색문자열] [file_name]
-c -> 찾아진 행의 총 수를 출력
-i -> 대소문자 구분하지 않음
-n -> 행번호를 함께 출력
-l -> 패턴이 존재하는 파일의 이름만 출력
-o -> 일치되는 부분만 출력

! 정규표현식
^ -> 줄의 시작
* -> 모든문자와 치환
. -> 공백을 포함한 단일문자와 치환
? -> 단일문자와 치환
$ -> 줄의 끝
\ -> 특수문자를 원래의 문자의미로 해석
\< -> 단어의 시작 지시자
\> -> 단어의 끝 지시자

# grep root /etc/passwd
# ps -ef | grep root
# grep -n '^root' /etc/passwd
# grep -o home /etc/passwd
# grep -l 'filesystem' *
# grep -i 'filesystem' file1
# grep -c 'filesystem' file1
# grep '\<[a-z].*h\>' file1 -> 소문자로 시작하고 h로 끝나는 단어가 포함된
                               모든 행을 출력


[실습]

다음을 수행하시오~
0. # rm  -rf  /test
1. 최상위 디렉토리 하위에 test 이름의 디렉토리 생성
2. 생성한 test 디렉토리로 이동
3. test 디렉토리 하위에 file1의 이름을 갖는 빈 파일 생성
4. file2 파일을 생성하면서 hello라는 데이터를 새로쓰기(단,명령어 한줄로처리)
5. file2 데이터에 byebye 데이터 이어쓰기(단, cat 명령어를 이용해서 추가)
6. file2의 데이터 내용 확인
7. 생성한 test 디렉토리 하위에 dir1 디렉토리 생성
8. test 디렉토리 하위에 있는 file2 파일을 이전에 생성한 dir1 디렉토리로 복사
9. test 디렉토리 하위에 있는 file1 파일의 이름을 file1-mod로 변경
10. test 디렉토리 하위에 있는 dir1 디렉토리 하위에 있는 file2 파일의
   하드링크 파일을 /root/file2-hard 라는 파일 이름으로 생성

11. test 디렉토리 하위에 있는 dir1 디렉토리 하위에 있는 file2 파일의
   심볼릭 링크 파일을 /home/file2-soft 라는 파일 이름으로 생성

12. 10MB 이상의 파일 검색하여 출력 (ls -l action 포함).

13. SetUID 퍼미션 파일 검색후 출력 (ls -l action 포함).

14. /test에서 최근 1일 이내에 변경된 파일 검색한 결과를 출력.
15. 최상위 밑에 존재하는 test 디렉토리를 한번에 삭제



# egrep -> grep에서는 제공하지 않는 확장된 정규표현식 메타문자사용
# egrep 'NW|EA' file1 -> NW나 EA가 포함된 행 출력
# egrep '3+' file1    -> 3이 한번 이상 등장하는 행 출력

# fgrep -> 정규표현식을 따르지 않음.
# fgrep '^d' file1 -> ^d 자체를 포함하는 문자열 출력

# awk 
-> 자료처리 및 리포트 생성에 사용하는 프로그래밍 언어
-> 사용자가 지정한 패턴 검색이나 특별한 작업을 수행하기 위해 파일을 
   행 단위로 조사

# awk '{action}' file_name
# awk 'pattern {action}' file_name -> 특정 문자열 검색후 필드단위로 출력
# awk '{print $1}' file_name       -> 특정 파일의 첫번째 필드만 출력
# awk '{print $1"\t " $2}' file1   -> tap 문자 삽입(\t)
# awk -F: '{print $3}' /etc/passwd -> 필드 구분자를 지정하는 옵션(-F)
# awk -F: '/root/{print $4}' /etc/passwd
# df | awk '$2 > 80000'            -> df 명령의 결과에서 두번째 필드가
                                      80000 보다 큰 행 출력
# date | awk '{print "Month:  "$2 "\nYear: "$1}' -> 리턴값(\n)

[실습]
/etc/passwd 파일에서 bash 쉘을 사용하는 사용자 계정명과 홈디렉토리를
다음과 같은 형식으로 출력하시오.
-다음-
USER : [계정명]  HOME : [홈디렉토리]
-> 




@@ 표준 I/O Redirection

! 기본 입출력 스트림에는 표준입력, 표준출력, 표준에러가 있음.
표준입력 (0) -> 키보드
표준출력 (1) -> 모니터
표준에러 (2) -> 모니터

! 표준 입출력 리다이렉션 기호
>    -> 쓰기
<    -> 읽기
>>   -> 추가 쓰기
<<   -> 추가 입력
2>   -> 에러의 방향을 바꿈
1>&2 -> 표준 출력을 에러로 보냄
2>&1 -> 에러를 출력으로 보냄



@@ 시스템 사용자 계정 관리

-> 리눅스 시스템을 사용하는 주체는 두가지로 볼 수 있는데
   그것은 사용자이거나 그룹임.
-> 시스템에 로그인하기위한 계정이 있어야 함.
-> 사용자들은 반드시 하나 이상의 그룹에 소속이 되어야 함.
-> 사용자 및 그룹정보에 관련된 파일은 다음과 같음.
/etc/passwd
/etc/shadow
/etc/group
/etc/gshadow
/etc/default/useradd
/etc/login.defs
/etc/skel

! /etc/passwd -> 사용자 정보파일이며 각 필드 구성은 다음과 같음.
1) 상용자 계정
2) 패스워드는 암호화되어 /etc/shadow 파일에 저장
3) 사용자ID-> 관리자:0, 일반사용자:500~, 0~99 시스템에 예약.
4) 그룹ID -> 관리자:0, 일반사용자:500~, 0~99 예약.
5) 주석(comment)
6) 로그인 사용자의 홈디렉토리
7) 로그인 사용자의 Shell

! /etc/shadow -> 패스워드 관련 정보파일이며 각 필드구성은 다음과 같음.

1) 사용자 계정
2) 암호화된 사용자의 패스워드
3) 1970. 01. 01부터 패스워드 변경된 날짜까지의 합계
4) 패스워드 변경가능한 최소일수
5) 패스워드 최대 사용기간
6) 패스워드 변경에 대한 경고일
7) 계정에 대한 사용제한일 이후 완전 사용정지일 지정
8) 계정 만기일
9) 사용하지 않음.

! 사용자 계정 관리 명령어

useradd -> 사용자 계정생성
adduser -> useradd와 동일
passwd  -> 패스워드 지정
usermod -> 사용자 계정의 속성변경
chage   -> 사용자 패스워드 정책 설정
userdel -> 사용자 계정삭제

# useradd [user_name] -> 기본값에 의해 일반 사용자 계정 생성
-D -> 사용자 추가에 설정된 기본값 출력
-u -> 특정 uid 지정
-g -> 특정 gid 지정
-G -> 사용자 계정의 2차 그룹 지정
-d -> 특정 홈디렉토리 지정
-e -> 사용자 계정 만기일 지정
-f -> 사용자 계정 유효일 지정
-s -> 기본 쉘 지정
-M -> 홈디렉토리 생성하지 않음
-c -> comment

# passwd             -> 자신의 패스워드 변경
# passwd [user_name] -> 관리자가 일반사용자 패스워드 지정

# usermod [option] [user_name]
-u 
-g 
-G 사용자 계정의 2차 그룹 지정
-d
-e 
-f
-s

# usermod -G user1 user2 -> user2 사용자를 user1그룹멤버로 지정

# chage [option] [user_name]
-l -> chage 설정값 확인
-M -> 최대 사용기간
-m -> 패스워드 변경할 수 있는 최소 사용기간
-E -> 계정 만료일
-d -> 새로운 패스워드 변경일
-W -> 만료전 경고일

# userdel [option] [user_name]
-r -> 계정의 홈디렉토리까지 삭제

! /etc/group
-> 사용자를 생성하면 자동으로 사용자명과 동일한 그룹이 생성됨. 
   따라서 기본적으로 자신과 동일한 그룹에 반드시 속하게 되며, 특정 그룹을
   생성하여 기존 사용자들이 소속되도록 할 수도 있음.
 -> group 파일의 각 필드는 4개이며 그 구성은 다음과 같음.

1) 그룹이름
2) 그룹패스워드로서 암호화된 내용이 /etc/gshadow에 저장됨
3) 그룹ID
4) 그룹 구성원

# groups [user_name] -> 사용자가 속해있는 그룹 확인

# groupadd [option] [group_name] -> 새로운 그룹생성
-g -> gid 지정
-o -> gid 중복사용
-r -> 0~499번까지의 gid를 자동 지정

# groupdel [group_name] -> 지정한 그룹 삭제

! /etc/gshadow -> 그룹의 패스워드가 암호화되어 저장되는 파일.

1) 그룹이름
2) 암호화된 암호
3) 그룹관리자
4) 그룹구성원

# gpasswd [option]
-> 특정 그룹에 사용자를 추가하거나 제거하고 특정 그룹에 패스워드를 설정 함.
-a -> 특정 그룹에 새로운 그룹멤버 추가
-d -> 특정 그룹에서 지정한 그룹멤버 제거
-r -> 특정그룹의 패스워드 제거
-A -> 특정 그룹의 그룹관리자 설정
-M -> 특정 그룹의 그룹멤버를 새로 설정

# gpasswd -a user1 wheel -> user1을 wheel 그룹에 추가
# gpasswd -d user1 wheel -> user1을 wheel 그룹에서 제거
# gpasswd wheel          -> wheel 그룹에 패스워드 설정.
                            저장은 /etc/gshadow에 저장.
# gpasswd -r wheel       -> 패스워드 삭제
# gpasswd -A user1 wheel -> wheel 그룹의 관리자로 user1으로 설정
# gpasswd -M user1 user2 wheel -> 기존 wheel 그룹멤버를 완전히 무시하고
                                  user1과 user2로 새로이 설정
# newgrp -> 현재 그룹의 ID를 변경. 즉 다른 특정 그룹들의 파일을 다룰 수 있게 됨.
# su - user1    -> user1으로 로그인
$ newgrp wheel  -> wheel 그룹으로 로그인

! /etc/default/useradd

! /etc/login.defs

! /etc/skel


[실습]

<chage를 이용한 패스워드 관리>

1. 기존에 생성했던 user1 계정이 있을경우 계정 삭제(-r)
2. 현재일을 2014년 1월 1일로 변경(date)
3. default 값으로 사용자 user1 생성
4. 생성한 user1 계정의 패스워드 설정
5. 생성한 user1 계정의 현재 패스워드 정책 확인. /etc/shadow 파일 내용 확인
6. 아래와 같이 패스워드 관리명령어인 chage 사용하여 패스워드 정책 세팅
(단, 현재일은 2014년 1월 1일 기준이며, 옵션 사용하여 단일라인으로명령어수행)
   -. 패스워드 최대 사용기간 90일 (-M)
   -. 패스워드 변경할 수 있는 최소기간 5일 (-m)
   -. 사용자 계정 만료일 2014년 12월 31일 (-E)
   -. 패스워드 유효기간 만료하기 전 사용자에게 경고일 10일 (-W)
7. user1 계정의 변경된 패스워드 정책 확인. /etc/shadow 파일 내용 확인
8. 패스워드 만료기간의 일주일 전인 2014년 3월 25일로 시스템 날자 변경
9. PuTTy 접속프로그램으로 user1 계정명으로 로그인했을때 다음의메시지출력확인
   " Warning: your password will expire in x days" 
10. 현재 puTTy 접속된 상태에서 패스워드 정책에 따른 user1 계정의패스워드변경.
11. user1 계정의 변경된 패스워드 정책 확인. /etc/shadow 파일 내용 확인.








@@ 파일시스템의 퍼미션 및 소유권

! Permission
-> 유닉스/리눅스 OS에서 파일이나 디렉토리를 읽거나, 쓰거나, 실행에 필요한
   권한을 의미.
-> 모든 파일은 서로 다른 액세스나 사용자, 사용자 그룹, 그리고 나머지 사용자들에
   대해 각각 다른 퍼미션을 부여할 수 있음. 

---------------------------------------------------------------------------
        기호    퍼미션     파일                    디렉토리
---------------------------------------------------------------------------
read     r      읽기권한   내용 읽기               ls 등으로 리스트 확인
write    w      쓰기권한   파일을 쓰거나 지우기    디렉토리에 파일 생성/삭제
execute  x      실행권한   바이너리파일 실행       디렉토리 위치변경/내용확인
---------------------------------------------------------------------------

drwxrw-r--  -> 디렉토리이며 소유자는 읽기/쓰기/실행, 그룹소유자는 읽고/쓰기
               기타 사용자는 읽기 권한만 있음.
-rw-r--r--  -> 일반파일이며 소유자는 읽기/쓰기 권한, 그룹소유자는 읽기권한,
               기타 사용자에게는 읽기권한만 있음.

-> 퍼미션 인증절차

! 소유권 변경
# chown [user_name] [file_name] -> 파일의 소유자 변경
# chown [user_name]:[group_name] [file_name]
# chown [uid].[gid] [file_name]
-R -> 하위경로까지 모두 적용

# chgrp [group_name] [file_name]
# chgrp [gid] [file_name]
-R -> 하위경로까지 모두 적용

! 퍼미션 변경

# chmod [mode] [file_name] -> 상대모드, 절대모드를 이용하여 변경
-> 상대모드: u,g,o,a (+/-), rwx 기호를 이용하여 모드 변경 
-> 절대모드: 8진법에 의해 모드 변경





! 특별한 퍼미션

SetUID -> 파일이 실행되는 동안 파일의 소유자의 권한이 부여되어 실행됨
          실행파일에만 명시될 수 있음. 4000모드, u+s
          적용이되면 소유자 퍼미션의 실행권한이 x-> s로 명시됨.
          대표적인 예로 /usr/bin/passwd
SetGID -> 파일이 실행되는 동안 파일의 그룹소유자의 권한이 부여되어 실행됨
          실행파일과 디렉토리에도 명시될 수 있음. 2000모드, g+s
          적용이되면 그룹소유자 퍼미션의 실행권한이 x-> s로 명시됨.

Sticky bit -> 디렉토리에 적용되며, 적용시 모든 퍼미션에 의해 사용자가
          읽고,쓰고,삭제가능. 단, 삭제는 소유주, 슈퍼유저만 가능.
          적용되면 Other 퍼미션의 실행권한이 x->t 로 명시됨.
          대표적으로 /tmp, /var/tmp 가 있음.
          1000모드, o+t

! 퍼미션 기본설정

# umask -> 파일/디렉토리 생성시 퍼미션의 기본값 지정.

umask    000 111 222 333 444 555 666 777   002 022
--------------------------------------------------
파일     666 666 444 444 222 222 000 000   664 644
디렉토리 777 666 555 444 333 222 111 000   775 755


[실습]

1. 디렉토리이며 소유자는 (읽기,쓰기,실행), 그룹 소유자는 읽기, 실행,
   기타 사용자는 읽기, 실행 권한이 있을때 파일 퍼미션 모드는? 

2. 디렉토리이며 소유자는 읽기, 쓰기 권한, 그룹 소유자는 읽기 권한이 있으며,
   나머지 사용자는 접근 권한이 없을때 파일 퍼미션 모드는?

3. 일반 파일이며 소유자는 읽기, 쓰기 권한, 그룹 소유자는 실행권한,
   나머지 사용자는 읽기만 가능 하다면 파일 퍼미션 모드는?

4. 파일의 소유권과 퍼미션이 다음과 같다.

   -rw-r--r--. 1 root root 0 2013-09-16 01:19 file1

   1) 소유권을 user2(소유자), user2(그룹소유자)로 변경하시오
      (user2 계정이 있다고 전제).

   2) file1 퍼미션을 소유자(읽기,실행), 그룹소유자(읽기, 실행),
      기타사용자(쓰기, 실행) 모드 퍼미션으로 변경하시오.
      (절대모드 상대모드 두가지 방법 모두 사용)

   3) 2)의 상태에서 SetUID 비트를 적용하시오
      (절대모드 상대모드 두가지 방법 모두 사용)
   4) 2)의 상태에서 특정 사용자인 user1에게 해당 파일에 대하여
      rw 권한을 부여하시오.

5. /temp 디렉토리를 생성하고 Sticky Bit 를 세팅하시오(기타 사용자도 읽기/쓰기 가능하도록).

6. 현재 설정되어 있는 umask 값이 020 이라면 생성될 수 있는 파일과 디렉토리 퍼미션은?

7. 기본 설정값으로 디렉토리 생성했을때 디렉토리 퍼미션이 다음과 같을때 이때 umask 설정값은?

   dr--r--r--. 2 root root 4096 2013-09-16 10:08 dir1

8. 기본 설정값으로 다음과 같은 파일을 생성시켰을때 각각의 의미를 설명하시오.

   -rw-r--r--. 1 root root   13 2013-09-15 23:51 file2
   |     |     |   |    |     |     |              |--
   |     |     |   |    |     |     ------------------
   |     |     |   |    |     ------------------------
   |     |     |   |    ------------------------------
   |     |     |   -----------------------------------
   |     |     ---------------------------------------
   |     ---------------------------------------------
   ---------------------------------------------------

