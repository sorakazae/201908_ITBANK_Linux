(1) 사용자 정의 함수
사용자가 직접 함수를 작성하고 호출할 수 있다. 형식은 다음과 같다.
함수 이름 (
	내용들...
)
func1.sh
#!/bin/sh
myFunction() {
echo "함수 안으로 들어 왔음"
return
)
echo "프로그램을 시작합니다."
myFunction
echo "프로그램을 종료합니다."
exit 0

(2) 함수의 파라미터 사용
함수의 파라미터(Parmeter=인자)를 사용하기 위해서는 함수를 호출할 때 뒤에 파라미터를 붙여서 호출하며, 함수 안에서는 $1, $2...로 사용하면 된다.
func2.sh
#!/bin/sh
hap() {
	echo `expr $1 + $2`
}
echo "10 더하기 20을 실행합니다."
hap 10 20 ->호출할 때 함수 이름에 넘겨 줄 파라미터를 공백으로 분리해서 차례로 적어 준다.
exit 0

(3)eval
문자열을 명령으로 인식하고 실행해 준다.
eval.sh
#!/bin/sh
str="ls -l install.log"
echo $str
eval $str
exit 0

(4)export
외부 변수로 선언해준다. 즉 선언한 변수를 다른 프로그램에서도 사용할 수 있도록 해준다.
exp1.sh
#!/bin/sh
echo $var1
echo $var2
exit 0

exp2.sh
#!/bin/sh
var1="지역변수"
export var2="외부 변수"
sh exp1.sh
exit 0

#sh exp2.sh
외부변수 출력

(5) printf
C언어의 printf() 함수와 비슷하게 형식을 지정해서 출력할 수 있다.
printf.sh
#!/bin/sh
var1=100.5
var2="Hello World~~"
printf "%5.2f \n\n\ \t %s \n" $var1 "$var2"
exit 0
%5.2f 총5자리에 소수점 아래 2자리까지 출력하라는 의미이다. \n은 1줄을 넘기는 개행 문자이고 /t는 Tab문자이다. %s는 문자열을 출력한다.

(6)set과 $(명령어)
리눅스 명령어를 결과로 위해서는 $(명령어) 형식을 사용해야 한다. 또한, 결과를 파라미터로 사용하고자 할 때는 set과 함께 사용한다.

set1.sh
#!/bin/sh
echo "오늘 날짜는 $(date) 입니다."

set $(date)
echo "오늘은 $4 요일 입니다."
exit 0

2행 $(date)는 date명령을 실행한 결과를 보여준다.
3행 $(date)의 결과가 $1, $2, $3... 등의 파라미터 변수에 저장된다.
4행 4번째 파라미터인 요일이 출력된다.





