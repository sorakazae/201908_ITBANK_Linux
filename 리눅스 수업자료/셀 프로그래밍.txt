셀 기본
셀은 사용자가 입력한 명령을 해석하고 커널에서 전달하고, 커널의 처리 결과를 반대로 사용자에게 전달하는 역활을 한다. 텍스트 모드나 터미널 처럼 명령어를 입력하는 환경이 셀이고 쉽게 생각해도  무방하다.

centos 베시 쉘 기능
Alias 기능(명령어 단축 기능)
History 기능
연산기능
Job control 기능
지동 이름 완서 기능
프롬프트 제어 기능
명령 편집 기능
확장 명령어
Alias 기능
#alias ls2="ls -al"

셀의 명령문 처리 방법
셀의 명령문은 명령문과 함께 여러 가지 옵션 또는 인자(Argument)를 사용할 수 있으며 다음과 같은 형식을 가진다.
(프롬프트) 명령어 [옵션...] [인자 ..]
 #          rm   -rf         /mydir

환경변수 
셀은 여러가지 환경 변수 값을 갖는다. 설정된 환경 변수는 다음 형식을 쓰면 확인할 수 있다.
echo $환경변수이름

호스트이름 출력 : echo $HOSTNAME 그외의 환경 변수는 printenv 명령을 입력하면 대부분이  출력된다.(일부는 printenv로 나타나지 않는다.)
환경변수의 값을 변경하려면 다음과 같은 형식을 사용한다.
export 환경변수=값

- 셀 스크립트 작성과 실행
vi name.sh 명령어나 gedit name.sh 명령으로 간단한 셀 스크립트 작성
#!/bin/sh
echo "사용자 이름 : " $USERNAME
echo "호스트 이름 : " $HOSTNAME
exit 0
exit 0 스크립트가 종료 코드를 반환하게 해준다. 0은 성공을 의미한다.
1. sh 명령으로 실행
sh <스크립트 파일>
2. 실행 가능 속성으로 변경 후에 실행
먼저 셀 스크립트 파일을 속성을 실행 가능하도록 변경한 후에 ./<스크립트 파일> 명령으로 실행한다.

ls -l name.sh
chmod +x name.sh
ls -l name.sh
./name.sh

- 변수
셀에서는 변수를 사용하시 전에 미리 선언하지 않으며, 변수에 처음 값이 할당되면서 자동으로 변수가 생성된다.
- 모든 변수는 문자열(string) 로 취급된다.(숫자를 넣어도 문자로 취급된다.)
- 변수 이름은 대소문자를 구분한다. 즉 $aaa라는 변수와 $AA라는 변수는 다른 변수다.
- 변수를 대입할 때 = 좌우에는 공백이 없어야 한다.
testval=Hello
testval=7+5 -> 정상이지만 "7+5"라는 문자열을 인식함

var1.sh
#!/bin/sh
myvar="Hi woo"
echo $myvar
echo "$myvar"
echo '$myvar'
echo \$myvar
echo 값 입력 : 
read myvar
echo '$myvar' = $myvar
exit 0

5행 $myvar 출력
6행 \$ $를 그냥 글자로 취급하게 한다. 결국 5행과 동일한 효과를 낸다.
8행 변수 myvar에 키보드 값(문자열) 입력

- 숫자 계산
변수에 대입된 값은 모두 문자열로 취급 된다. 만약 변수에 들어 있는 값을 숫자로 해서 +, -,*,/ 등의 연산을 하려면 expr을 사용하면 된다. 숫자 1 왼쪽에 있는 역따옴표(`)로 묶어줘야 한다. 그리고 수식에 괄호를 넣으려면 그 앞에 꼭 역슬래쉬(\)를 붙여 주어야 한다. 또한 +,-,/와 달리 곱하기(*) 기호도 예외적으로 앞에 역슬래쉬(\)붙여 줘야 한다.
#!/bin/sh
num1=100
num2= $num1 + 200
echo $num2
num3=`expr $num1 + 200`
echo $num3
num4=`expr \( $num1 + 200 \) /10 \* 2`
echo $num4
exit 0

- 파라미터(Parameter) 변수
파라미터 변수는 $0, $1, $2..의 형태를 갖는다. 이는 자신을 실행한 명령어의 파라미터를 말한다. 예를 들어 yum -y install xinetd" 명령을 실행하면 다음과 같다.

명령어 		yum  -y  install xinetd
파라미터 변수    $0  $1    $2      $3
즉 $0-> yum , $1-> -y 값이 들어간다. 또한 전체 파라미터는 $*로 표현된다.

paravar.sh
#!/bin/sh
echo "실행 파일 이름은 <$0> 이다"
echo "첫번째 파라미터는 <$1> 이고, 두 번째 파라미터는 <$2>다"
echo "전체 파라미터는 <$*> 다"
exit 0

sh paravar.sh 값1 값2 값 3 --> 결과 확인

- if문과 case 문
(1) 기본 if문
대부분의 프로그래밍 언어에서 지원되는 if문을 살펴보자.
if [ 조건 ]
then
  참일 경우 실행
fi
주의해야 할점은 [ 조건 ] 사이의 각 단어에는 모두 공백이 있어야 한다는 것이다. 틀리기 쉬우므로 잘 기억하자.

if1.sh
#!/bin/sh
if [ "woo" = "woo" ]
then
	echo "찹입니다"
fi
exit 0

(2) if ~ else 문
참인 경우와 거짓인 경우를 구분해서 실행한다. 
if [ 조건 ]
then
	참일 경우 실행
else
	거짓일 경우 실행
fi

if2.sh
#!/bin/sh
if [ "woo" != "woo" ]
then
	echo "참입니다"
else
	echo "거짓입니다."
fi
exit 0

중복 if문을 위해서 if가 합쳐진 'elif' 구문도 사용할 수 있다.
(3) 조건문에 들어가는 비교 연산자
문자열 비교
"문자열1" = "문자열2" 두 문자열이 같은면 참
"문자열1" != "문자열2" 두 문자열이 같지 않으면 참
-n "문자열" 문자열이 널(빈 문자열)이 아니면 참
-z "문자열" 문자열이 널(빈 문자열)이 이면 참

산술비교
수식1 -eq 수식2 두 수식(또는 변수)이 같으면 참
수식1 -ne 수식2 두 수식(또는 변수)이 같지 않으면 참
수식1 -gt 수식2 수식1이 크다면 참
수식1 -ge 수식2 수식1이 크거나 같은면 참
수식1 -lt 수식2 수식1이 작으면 참
수식1 -le 수식2 수식1이 작거나 같으면 참
!수식 		수식이 거짓이라면 참

if3.sh
#!/bin/sh
if [ 100 -eq 200 ]
then
	echo "100과 200은 같다"
else
	echo "100과 200은 다르다"
fi
exit 0

(4) 파일과 관련된 조건
if문에서 파일을 처리하기 위한 조건

 -d 파일이름 파일이 디렉토리며 참
-e 파일 이름 파일이 존재하면 참
-f 파일이름  파일이 일반 파일이면 참
-g 파일이름  파일이 set-group-id가 설정되면 참
-r 파일이름 파일이 읽기 가능이면 참
-s 파일이름 파일크기가 0이 아니면 참
-u 파일이름 파일이 set-user-id가 설정되면 참
-w 파일이름 파일이 쓰기 가능 상태이면 참
-x 파일이름 파일이 실행 가능 상태이면 참

if4.sh
#!/bin/sh
fname=/etc/init.d/httpd
if [ -f  $fname ]
then 
	head -5 $fname
else
	echo "웹 서버가 설치되지 않았습니다."
fi 
exit 0

(5)case ~ esac문
if문은 참과 거짓의 두 경우만 사용할 수 있다.(이를 2중 분기라고도 한다.) 그런데 여러 가지 경우의 수가 있다면 if 문을 계속 중복해서 사용해야 하므로 구문이 복잡해 진다. 이때 사용하는 것이 case 문이다.(다중 분기라고도 한다.)
case문은 /etc/init.d/디렉토리의 서버 데몬 실행 스크립트에서 많이 사용되므로 잘 익혀두자.
case1.sh
#!/bin/sh
case "$1" in
	start)
		echo "시작 ~~" ;;
	stop)
		echo "중지 ~~" ;;
	restart)
		echo "다시 시작~~" ;;
	*)
		echo "뭔지 모름 ~~" ;;
esac
exit 0

case2.sh
#!/bin/sh
echo "centos가 재미 있나요 ? (yes/no)"
read answer
case $answer in	
	yes | Y | Yes | YES)
	  echo "다행입니다."
	  echo "더욱 열심히 하세요" ;;
	[nN]*)
	  echo "불행입니다. ㅠㅠ" ;;
	*)
	  echo "yes 아니면 no만 입력했어야죠"
	  exit 1 ;;
esac
exit 0

6행 실행할 문장이 더 있으므로 끝에 ;;를 붙이지 않는다는 점을 주의한다.
7행 실행할 문장이 끝났으므로 뒤에 ;;를 붙인다.
8행 [nN]* 의 의미는 n 또는 N가 들어가는 모든 단어를 다  인정해 준다.
정상적인 종료가 아니므로 exit 1로 종료 랬다.(꼭 해야 하느 사항은 아님).

(6) AND, OR 관계 연산자
조건문에서 and와 or의 의미를 가지는 관계 연산자를 사용할 수 있는데 and는 -a 또는 &&를 사용 하면되고, or -o 또는 ||를 사용하면 된다. -a나-o는 테스트문([])안에서 사용할 수 있는데, 이때 괄호 등의 특수 문자 앞에서 역슬래쉬(\)붙여 줘야 한다.

andor.sh
echo "보고 싶은 파일명을 입력하세요."
read fname
if [ -f $fname ] && [ -s $fname ] 
then 
	head -5 $fname
else
	echo "파일이 없거나, 크기가 0입니다."
fi 
exit 0
#sh andor.sh
파일명 입력 ? 
/etc/init.d/mysqld
메세지 출력
#sh andor.sh
파일명 입력 ?
/etc/init.d/httpd
메시지 출력

-반복문
(1) for문
for문은 반복을 위한 구문인데, 다른 프로그래밍 언어에서 사용하던 것과 약간 다른 형태를 가진다. 다음 형식을 보면 변수에 각각의 값을 대입한 후에 do 안의 '반복할 문장을' 수행하게 된다. 그러므로, 값의 개수만큼 반복하게 된다.
for 변수 in 값1 값2 값3
do
	반복할 문장
done

for1.sh
#!/bin/sh
hap=0
for((i=1;i<=10;i++)) -> 괄호가 두 개임에 주의한다.
do
	hap=`expr $hap + $i`
done
echo "1부터 10까지의 합 : " $hap
exit 0
	
for2.sh
#!/bin/sh
for fname in  $(ls *.sh)
do
	echo "-------$fname-------"
	head -3 $fname
done 
exit 0

실행 
#sh for2.sh


(2)while문
while문은 조건식이 참일 동안에 계속 반복하는 특성을 갖는다.
while1.sh
#!/bin/sh
while [ 1 ]
do
	echo "centos 4.5"
done 
exit 0
조건식 위에 [ 1 ] 또는 [ : ]가 오면 항상 참이 된다. 그러므로 4행을 무한 루프로 반복한다.
1에서 10까지의 합계을 출력하는 for1.sh과 동일한 기능을 while으로 구현해 보자.
#!/bin/sh
hap=0
i=1
while [ $i -le 10 ]
do
 hap=`expr $hap + $i`
 i=`expr $i + 1'
done
echo "1부터 10까지의 합 : "$hap
exit 0

이번에는 비밀번호를 입력 받고, 비밀번호가 맞을 때까지 계속 입력받는 스크립트를 작성해 보자.
#!/bin/sh
echo "비밀번호를 입력하세요."
read mypass
while [ $mypass != "1234" ]
do
	echo "틀렸음. 다시 입력하세요."
	read mypass
done
echo "통과"
exit 0
#sh while3.sh

 