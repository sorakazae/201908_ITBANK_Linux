실습 
CD로 쉽게 설치하기
0 페도라 서버 :Vmware 메뉴 vm->Snap -> 설치직후(부팅)을 선택해서, 페도라 설치 직후의 환경을 돌아가자
1. 페도라 서버 : 윈도우즈 제어판의 "프로그램 추가/제거"와 비슷한 기능을 하는 페도라 명령어인 "system-config-packages" 를 실행한다.
 - 아래로 스크롤해서 웹서버 체크하고 자세한 정보를 확인한다.
 - 상세 정보 중 php-mysql 체크하고 닫기
 - 마찬 가지로 Mysql 데이터베이스를 체크한다. Mysql 데이터베이스는 8/13 되도록 한다.
 - 업데이트 버튼 클릭 -> 계속 진행 ->Fedora 시디를 번갈아 넣으면서 설치해야 한다.
2. APache, PHP, Mysql의 버전을 확인해 보도록 하자
#rpm -qa httpd
#rpm -qa php
#rpm -qa mysql

3. 페도라 서버 : 터미널에서 httpd 서비스가 가동되는지 확인하자. 가동되고 있지 않을 것이므로 가동시켜 준다.
# service httpd status
httpd 정지 되었습니다.
# servicd httpd start
httpd 를 시작합니다.

마찬가지로 mysqld 서비스를 확인하고 시작해 준다.
#service mysqld status
mysqld가 정지 되었습니다.
# serivce mysqld start

4. 컴퓨터 부팅시에 httpd와 mysqld 서비스가 자동으로 가동되도록 설정하도록 하자. system-config-services 명령어로 " 서비스 설정" 창이 뜨면 httpd와 mysqld 를 체크하고 " 저장" 버튼을 클릭한 후 창을 닫으면 된다.

5. http://localhost 또는 http://127.0.0.1 확인
6. 페도라 서버 vi나 gedit /var/www/html/phpinfo.php 파일을 아래와 같은 내용으로 생성한다.
<? phpinfo(); ?>
웹브라우저에서 http://localhost/phpinfo.php로 접속해서 아래와 같은 화면이 나타난다.
7. 페도라 서버 : 이제는 외부에서 웹서버로 접속이 잘 되는지 확인해 보자. 먼저 ifconfig eth0 명령으로 웹 서버의 ip 주소를 확인해 놓자.
8. 윈도우즈 클라이언트 : http://192.168.100.100/phpinfo.php 아마도 접속이 되지 않을 것이다. 웹 서버에서 방화볃을 해제하지 않았기 때문이다.
9. 페도라 서버 : system-config-securitylevel 명령을 실행하고 "신뢰할 수 있는 서비스" 에서 www(HTTP)를 체크하고 확인 버튼을 클릭한다.
10. http://192.168.100.100/phpinfo.php 접속해 확인
11.페도라 서버 : Apache, PHP, Mysql 이 정상적으로 작동하느 것을 확인할 수 있었다. 이제는 웹 페이지 또는 php 소스를 /var/www/html 디렉토리에 가져다 놓으면 웹사이트를 운영할 수 있다.


★ 웹 서버 파일(httpd.conf)

이제 아파치 웹 서버 파일인 httpd.conf 파일의 몇몇 주요한 의미 
1. ServerRoot "/etc/httpd" : 웹서버의 설정파일, 로그 파일 등이 저장 되는 최상위 디렉토리
2. Timeout 120 : 서버와 클라이언트 연결 시에 아무런 메세지 없을 때 오류로 처리되는 초 단위 시간, 네트워크 속도가 느릴 경우에는 높게 잡아주는 것이 좋다.
3. Listen 80 : 웹서버의 포트 번호, 기본적으로 대부분의 웹서버는 80번 포트를 사용한다.
4. ServerAdmin root@localhost :관리자의 메일 주소
5. DocumentRoot "/var/www/html" : 웹 서버의 홈디렉토리, 예를 들면 http://<서버IP 또는 URL>/로 접속되는 디렉토리
6. DirctoryIndex index.html index.html.var http://<서버IP 또는 URL>/접속 시 디폴트로 전송해 주는 웹 페이지
7. <Directory "/var/www/html">
Option Indexs FollowSysLinks
AllowOverride None
Order allow.deny
Allow from all
</Directory>

웹 서버는 디렉토리 단위로 설정을 한다. 즉 각각의 디렉토리 마다 허가/거부 등 접근 권한을 달리 할 수 있다.
Option Indexes FollowSystemLinks는 현재 디렉토리에 6번의 DirectoryIndex에 지정된 파일이 없다면, 파일의 목록을 대신 출력해 주라는 의미다

8. AccessFileName .htaccess : 디렉토리에 사용자 인정을 설정할 경우에 참조하는 파일명
9.  DefaultType text/plain : 알 수 없는 확장자를 만날 때 처리하는 방식. 디폴트로 텍스트로 처리함. 예를 들어, /var/www/html에 index.abc라는 파일이 있고, 외부에서 http://<서버IP>/index.abc를 접근했을 때 웹 서버는 이 파일이 무엇인지 알 수 없으므로 그냥 텍스트로 처리 한다는 의미다.
10. Error logs/error_log : 웹 서버에 문제가 발생 시에 에러를 기록하는 로그 파일, 여기서는 /etc/httpd/logs/access_log 파일에 해당한다.
11. CustomLog logs/access_log combind : 외부에서 접근 한 기록에 대한 로그 파일, 여기서는 /etc/httpd/logs/access_log 파일에 해당한다.
12. ServerTockens OS : 웹서버의 HTTP 헤더 정보를 제공하는 정도를 나타냄 ,가장 적은 정보를 주기 위헤서는 Prod를 적고 가장 많은 정보를 주기 위해서는 Full을 적으면 된다
13 .Alias/icons "/var/www/icons/ : Html 문서에서 /icons/에 해당하는 절대 경로를 나타냄
14. AddType application/x-https-php.php.php3.php4.html.htm.inc : 웹 서버가 인식할 확장자를 추가하는 영역
설정한 httpd.conf 파일에 문법적으로 오류가 있는지 체크하려면 다음과 같이 테스트 하면 된다.
# service httpd configtest
systax OK


★ 소스를 컴파일하여 APM을 설치하자.
APM을 앞에서 실습했던 RPM 방식으로 설치할 수도 있지만 , 실무에서 더욱 많이 사용되는 방법은 소스를 가지고 직접 컴파일해서 사용하는 것이다. 이 방법은 관리자가 자신의 목적에 맞도록 옵션을 주어서 컴파일할 수 있는 장점이 있다.

