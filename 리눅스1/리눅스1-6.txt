
[ITBANK Andylec  주말 리눅스 1 과정]

▣오늘의 수업내용(6일차)
특수권한
ACL
프로세스 관리

<특수권한>
☞special permission
4000 setuid      실행시 소유자 권한을 갖는다.
2000 setgid      실행시 그룹 권한을 갖는다.
1000 sticky bit  공용 디렉토리에 설정해서 소유자와 루트만이 파일을
                      삭제할 수 있도록 설정할 때 사용한다.

☞setuid
로그인한 사용자와 관계없이 프로그램을 실행할 때 
그 프로그램의 소유자 권한으로 실행되는 특별한 권한 
주로 루트 소유자로 되어있는 프로그램에 설정되어 있다.

[cent]
#ll  /etc/shadow


#which passwd
/usr/bin/passwd
#
#ll  /usr/bin/passwd
--->setuid 가 적용되어 있다.


☞테스트 계정 생성하기
[cent]
adduser : 새로운 계정(사용자)을 생성시키는 명령
apple 계정이 없으면 아래와 같이 생성해 주고 암호를 지정해 준다.

#adduser  apple
--->apple 사용자 생성

#passwd apple
1234
1234

--->apple 사용자의 암호 설정
(입력시 아무것도 안 보이므로
정확히 타이핑하고 엔터를 누르면 된다.)
루트일 때는 짧은 암호를 설정할 수 있다.


[Putty]
windows 에서 Putty 이용하여 cent 리눅스로 apple 로그인
$ id
uid=500(apple) gid=500(apple) groups=500(apple)


$cat  /etc/passwd 
---> O (파일 내용 출력 됨)
---> /etc/passwd 파일은 사용자 계정이 등록되어 있는 파일

$cat  /etc/shadow 
---> X (파일 내용 출력 안 됨)
---> /etc/shadow 파일은 사용자 암호가 등록되어 있는 파일

$ ll /etc/passwd  /etc/shadow


$passwd
Changing password for user apple.
Changing password for apple
(current) UNIX password: 1234(apple 의 현재 패스워드 입력)
New UNIX password: qwer ---> 일반계정은 간단한 암호를 사용할 수없다. (루트는 지정할 수 있다.)
BAD PASSWORD: it is too short
New UNIX password: dovmfskfk (일반 계정은 6자 이상 단순하지 않은 암호를 지정해야 함)
Retype new UNIX password: dovmfskfk
passwd: all authentication tokens updated successfully.

---> passwd 명령어에 setuid 가 있어서 /etc/shadow 파일이 업데이트 된다.
---> setuid 로 인하여 일반계정도 자신의 암호를 변경할 수 있다.

[cent]
(루트 계정으로 작업-프롬프트가 # 상태)
#ll  /usr/bin/passwd
#chmod  u-s  /usr/bin/passwd
(setuid 제거)

#ll  /usr/bin/passwd


[Putty]
(apple 계정으로 작업-프롬프트가 $ 상태)
$ passwd

---> passwd 명령어에서 setuid 를 제거하면 일반계정은 암호를 
     업데이트 할 수 없다.


☞passwd 권한 원래대로 설정하기
[cent]
(루트 계정으로 작업하기)
#ll  /usr/bin/passwd
#chmod  u+s  /usr/bin/passwd
#ll  /usr/bin/passwd


☞sticky bit
setuid 와 setgid 는 일반적으로
디렉토리가 아니라 
루트 소유자로 된 실행가능한 프로그램에 지정하고 
sticky bit 는 디렉토리에 지정한다.

[cent]
#adduser  banana
#passwd  banana
암호지정
1234
1234
#passwd  apple
1234
1234


#ls -l /

drwxrwxrwt   12 root root   4096 Jun 10 21:38 tmp
---> sticky bit 가 설정되어 있다.(1777)


[Putty]
apple login
$cd  /tmp
$touch  apple2.txt
$ll  a*
-rw-rw-r--  1 apple apple    0 12월 12 00:34 apple2.txt

$su  banana
---> banana 계정으로 전환
Password: banana 계정의 암호 입력

$id
uid=501(banana) gid=501(banana) groups=501(banana)

$pwd
/tmp

$ll  a*
-rw-rw-r--  1 apple apple    0 Jun 10 22:19 apple2.txt
$rm apple2.txt
rm: remove write-protected regular empty file `apple2.txt'? y 입력
rm: cannot remove `apple2.txt': Operation not permitted

$ls
apple2.txt    
$

---> sticky bit 로 인하여 다른 계정이 만든 파일이 삭제되지 않는다.
---> 디렉토리 퍼미션이 777 이라면 다른 계정이 만든 파일을 지울수 있다.

---> 파일을 삭제할 때는 파일의 w 권한이 적용되는 것이 아니고 
그 파일이 속한 디렉토리의 w 권한이 적용된다. 
파일의 w 권한은 파일의 내용을 수정할 수 있다는 의미이다.

---> sticky bit 는 주로 공용 디렉토리(인터넷 게시판에 해당)에 설정하며
루트나 파일 소유자만이 해당 파일을 삭제할 수 있다.


▣ACL(Access Control List)
파일과 디렉토리의 확장 속성
getfacl : acl 확인
setfacl : acl 설정
  -m  // 수정
  -x   // 삭제
  -b   // 모든 ACL 정보 삭제

형식)
getfacl  파일명
setfacl  -m  [acl]  파일명
setfacl  -x  [acl]  파일명

setfacl  -m  u:apple:7  파일명
setfacl  -m  u:banana:rwx  파일명
setfacl  -m  g:sys:4  파일명
setfacl  -m  o:r  파일명




//////////////////////////////////////////////////////////////////////////
#man  getfacl

GETFACL(1)                   Access Control Lists                  GETFACL(1)

NAME
       getfacl - get file access control lists

SYNOPSIS
       getfacl [-dRLPvh] file ...

       getfacl [-dRLPvh] -

DESCRIPTION
       For  each  file, getfacl displays the file name, owner, the group, and
       the Access Control List (ACL). If a directory has a default ACL,  get-
       facl  also  displays  the  default  ACL.  Non-directories  cannot have
       default ACLs.

#man  setfacl

SETFACL(1)                   Access Control Lists                  SETFACL(1)

NAME
       setfacl - set file access control lists

SYNOPSIS
       setfacl [-bkndRLPvh] [{-m|-x} acl_spec] [{-M|-X} acl_file] file ...

       setfacl --restore=file

DESCRIPTION
       This  utility  sets  Access Control Lists (ACLs) of files and directo-
       ries.  On the command line, a sequence of commands is  followed  by  a
       sequence  of  files (which in turn can be followed by another sequence
       of commands, ...).



EXAMPLES
       Granting an additional user read access
              setfacl -m u:lisa:r file

       Revoking  write  access from all groups and all named users (using
 the
       effective rights mask)
              setfacl -m m::rx file

       Removing a named group entry from a file’s ACL
              setfacl -x g:staff file
//////////////////////////////////////////////////////////////////////////



[cent 가상머신]
#ls  -ld  /root
dr-xr-x---   root   root     /root
   5  5  0


#setfacl  -m  u:apple:rwx  /root
#ls  -ld  /root
--->ACL 을 설정하면 실제 적용되는 권한과 다르게 표시되는 경우도 있으므로
getfacl 로 확인을 해야 함


#getfacl  /root

#id  banana
#usermod  -g  root  banana
---> banana 계정의 기본그룹을 root 로 변경
#id  banana
---> 기본 그룹 변경확인


[Putty]
1) apple 계정으로 로그인해서 테스트
$cd
$pwd
/home/apple
$ls  /root
$cd  /root
$touch  apple.txt
$ll

2) banana 계정으로 로그인(또는 su - banana)

[banana@linux1 ~]$
[banana@linux1 ~]$ ls /root
[banana@linux1 ~]$
[banana@linux1 ~]$ cd /root
[banana@linux1 root]$ pwd
/root
[banana@linux1 root]$ touch banana.txt
touch: cannot touch `banana.txt': 허가 거부됨
[banana@linux1 root]$
[banana@linux1 root]$ ls -ld /root
drwxrwx---+ 19 root root 4096  2월 11 12:36 /root
[banana@linux1 root]$
[banana@linux1 root]$ id
uid=512(banana) gid=0(root) groups=0(root)
[banana@linux1 root]$


3) candy 계정으로 테스트

[cent]
#adduser  candy
#passwd  candy
1234
1234


[Putty]
$su  -  candy
$ls  /root
$cd  /root


▣일반 계정에서 루트 또는 다른 계정으로 전환하기
su : Switch User

-관리자도 일반 계정으로 사용하다가 루트 권한이 필요한 경우
su 를 이용하여 루트 로 전환하기 위해서 사용되며
테스트 할 때 A 계정에서 B 계정으로 전환할 때도 이용된다.
-루트는 계정전환시 암호를 묻지 않고
일반 계정은 암호를 물어본다.

1. 루트 계정으로 전환
   1)su   (su    root 와 동일)
   2)su - (su  - root 와 동일)

2. 다른 계정으로 전환
   1)su     계정명
   2)su  -  계정명

su 다음에 
- 를 사용하면 모든 쉘설정파일을 읽어서 로그인한 것과 비슷하게 되고
- 가 없으면 모든 쉘설정파일을 읽지 않아서 일부 환경변수는
이전 계정의 내용으로 존재한다.
이전 계정으로 돌아올 때는 #exit 하면 된다.
putty 접속을 종료할 때도 #exit 를 입력하면 된다.


             su
          --------> 
apple               root
	 <-------- 
	     exit


▣실습
1. /work 디렉토리 권한과 소유권을 아래와 같이 설정
drwxr-x---   root   sys     /work
다른 계정은 /work 에 접근할 수 없고
apple 계정과 banana 계정만 /work 디렉토리를 이용할 수 있도록 ACL 설정
(apple 계정은 rwx 권한을 ACL 이용하여 적용)
(banana 계정은 r-x 권한을 ACL 이용하여 적용)

2. 결과 확인후 원래대로 설정
1)모든 acl 삭제
2)폴더 권한 아래와 같이 설정
drwxr-xr-x   root   root   /work

3. cat 명령어에 SetUID 설정하고 Putty 이용하여 apple 로그인한 후
   $cat  /etc/shadow  테스트
4. /tmp2 폴더 생성후 777 로 권한 설정
5. Putty 로 apple 계정 로그인 후 /tmp2 폴더에 apple.txt 생성
6. banana 계정으로 전환 후 /tmp2 폴더의 apple.txt 삭제 테스트


/////////////////////////////////////////////////////////////////////
#chmod  750  /work
#chgrp  sys  /work
#ls  -ld  /work
#setfacl  -m  u:apple:rwx  /work
#setfacl  -m  u:banana:r-x  /work
#getfacl  /work

일반계정으로 테스트

#setfacl  -b  /work
#ls  -ld  /work
#chmod  755  /work
#chown  root:root  /work
#ls  -ld  /work

#chmod  u+s  /bin/cat  또는  #chmod  4755  /bin/cat

#mkdir  /tmp2
#chmod  777  /tmp2
#ls  -ld  /tmp2
/////////////////////////////////////////////////////////////////////

<umask 사용하기>
umask : 파일이나 디렉토리가 만들어 질 때 디폴트 퍼미션을
            결정하는 값 또는 명령어

디폴트 퍼미션
디렉토리  :  777 - umask
파일       :  666 - umask 

------------------------------------------------------
mode(umask)        File               Directory
------------------------------------------------------
0000                    666               777
0001                    666               776
0002                    664               775
0022                    644               755
------------------------------------------------------
※모드가  0001 일 때 파일은 665 가 아니고 666 임
(파일에는 기본적으로 실행권한이 없으므로)


r(4)  w(2)  x(1)

6 : rw-
5 : r-x

-rw-rw-rw-      -rw-rw-r-x
  6   6   6          6   6   5
  

///////////////////////////////////////////////////////////
umask 가 010 일 때

디렉토리 기본퍼미션)
777
010
----
767

파일 기본퍼미션)
666
010
----
666
///////////////////////////////////////////////////////////


[cent]
#umask 
0022
---> umask 값 출력

#nl  /etc/bashrc  |  more
(로그인시 /etc/bashrc 파일에 의해서 umask값이 결정된다.)

56 ~ 64 번 라인
기본설정
  일반계정 : 002 
  루트      : 022


<프로세스 관리>

▣용어정리
1. 프로그램 : 하드디스크에 저장되어 있는 파일중에서 실행가능한 파일
2. 프로세스 : 메모리에 로딩된 프로그램
3. 프로세스 분류
1)대화형 프로세스 : 터미널 사용할 때
2)배치 프로세스 : 특정 시간 또는 시스템이 한가할 때 작업을 몰아서 실행(at, batch)
                       터미널과 교류가 없다.
3)데    몬  : 부팅중에 메모리에 로딩되어 종료될 때까지 
                상주해 있는 프로그램
	        (윈도우에서는 서비스라 부른다.)


▷프로세스는 여러 가지 자원(CPU,메모리,장치)을 사용한다.
▷프로세스는 해당 명령을 수행하기 위해 CPU 를 점유하기도 하고
명령어와 데이터를 저장하기 위해 물리적인 메모리를 사용한다.
▷프로세스는 운영체제의 제어를 받으면서 실행,대기,중단,좀비 의
한 상태를 갖는다.

실행(running) : 프로세스가 현재 실행중인 상태
대기(waiting) : 운영체제가 자원을 할당해 주기를 기다리는 상태
중단(stopped) : Ctrl + z 를 입력받은 경우
좀비(zombie)  : 프로세스가 종료된 상태이지만 정보가 완전히 
                    삭제되지 않고 남아 있는 경우
리눅스 프로세스는 프로그램을 실행하는데 필요한 PID,UID,GID 정보를 포함한다.

PID(Process ID)   : 프로세스가 시작할 때 할당받는 프로세스 식별번호
UID(User ID)      : 사용자 번호
GID(Group ID)    : 그룹 번호

프로세스 정보가 있는 디렉토리 : /proc
/proc 에는 각 프로세스에 해당하는 PID 디렉토리가 있다.
/proc 는 가상의 디렉토리로 커널 메모리를 마운트 한 것이다.


▣프로그램 실행 방식
1. foreground : 전면실행(터미널을 프로그램이 점유하고 있는
                    상태로 프로그램이 종료 될 때까지 다른 명령어
	            를 실행할 수 없다.)

2. background : 후면실행(프로그램은 실행되면서 쉘프롬프트가 
                     나타나므로 프로그램을 계속 실행시킬 수 있다.)
                     예) 윈도우 도스창

---> 리눅스 터미널은 디폴트가 포그라운드 방식이다.
백그라운드 실행시키는 방법 : 명령어 &  또는 명령어&


#gcalctool (Putty 에서 하면 안되고 리눅스 가상머신 터미널에서 실행)
---> 기본적으로 포그라운드 로 실행된다.

종료(마우스 이용)


#gcalctool  &
[1]  1234
#gcalctool  &
[2]  1235
#gcalctool&
[3]  1236

백그라운드로 프로그램을 실행시키면 번호가 두 개 나타나는데
첫번째 번호는 백그라운드로 실행된 프로그램 갯수 번호
두번째는 프로세스 아이디(PID) 이다.
리눅스 운영체제는 파일,프로세스,계정 등 을 모두 숫자로 구분해서 관리한다.

PID(Process ID) : 프로세스를 구분하는 번호


☞jobs
현재 터미널에서 백그라운드로 실행된 프로세스 출력

#jobs 
+ 는 가장 최근의 작업
- 는 그 이전 작업

#jobs  -l
PID 도 출력


☞fg : 포그라운드로 전환
#fg  %2
2번 작업을 포그라운드로 전환

ctrl + z : 프로세스 중지(stop) 시키는 단축키

#jobs


☞bg : 백그라운드로 전환
#bg  %2
(2번 작업을 백그라운드로 전환)
#jobs


☞ps(report  process  status) : 프로세스 정보 출력

옵션
 -a                   // 전체 사용자(터미널 소유)의 모든 프로세스(all) 출력
 -e                   // 현재 실행중인 모든 프로세스(every) 출력
 -f                   // full list로 출력
 -l                   // long list로 출력
 -m                 // 쓰레드 정보 출력
 -t TTY             // 지정한 TTY를 가진 프로세스 정보 출력(ps  -t  pts/2)
 -u 사용자이름   // 지정한 사용자가 실행한 프로세스
 -p PID            // 지정한 PID(프로그램 번호)를 가진 프로세스 정보 출력
 -u UID           // 지정한 UID(사용자 번호)를 가진 프로세스 정보 출력
 -g GID           // 지정한 GID(그룹 번호)를 가진 프로세스 정보 출력
 -x                 // 제어 터미널을 갖지 않은 프로세스도 출력(? 로 나타나는 프로세스)


#ps
현재 터미널에서 실행된 프로세스만 출력
TTY 는 프로그램이 실행된 터미널을 의미

#tty
현재 사용하고 있는 터미널 출력
(/dev/pts/번호)


모든 프로세스 출력하기
#ps  -ef
#ps  aux 또는 ps axu

#ps  aux  |  more
ps  aux  결과의  헤드라인 항목

USER(USER)                    // 사용자 이름
PID(Process ID)                // 프로세스마다 주어지는 번호
%CPU                              // 프로세스가 사용하는 CPU 점유율
%MEM                            // 프로세스가 사용하고 있는 메모리 점유율
VSZ                                 // 프로세스가 사용하는 가상메모리 사이즈(램 + 스왑), 단위는 KB
RSS(Resident Set Size)      // 프로세스가 사용하는 실제 메모리의 크기
TTY(Tele TYpewrite)          // 명령어가 실행되는 터미널의 번호
STAT(STATE)                    // 실행되고 있는 프로세스 상태
    R                                // 실행 중 혹은 실행될 수 있는 상태
    S                                // sleep, 수면상태
    T                                // 정지된 상태 (suspend)
    Z                                // 좀비 (zombie) 프로세스
    X                                // dead (should never be seen)
    W                               // 스왑 out 된 상태
    <                                // 우선 순위가 인위적으로 높아진 상태
START(START)                 // 프로세스가 시작된 시간
TIME(TIME)                      // CPU가 사용한 시간
COMMAND(COMMAND)   // 사용자가 실행한 명령어




사용자가 정의한 형식으로 출력
#ps  -o  pid,state,tty,args
#ps  -o  pid,pcpu,pmem,args



☞pstree : 프로세스를 트리 구조로 출력

//////////////////////////////////////////////////////////////////////////

[root@cent ~]# pstree --help
pstree: 부적절한 옵션 -- -
usage: pstree [ -a ] [ -c ] [ -h | -H pid ] [ -l ] [ -n ] [ -p ] [ -u ]
              [ -G | -U ] [ pid | user]
       pstree -V

    -a     show command line arguments
    -c     don't compact identical subtrees
    -h     highlight current process and its ancestors
    -H pid highlight process "pid" and its ancestors
    -G     use VT100 line drawing characters
    -l     don't truncate long lines
    -n     sort output by PID
    -p     show PIDs; implies -c
    -u     show uid transitions
    -U     use UTF-8 (Unicode)) line drawing characters
    -V     display version information
    -Z     show SELinux security contexts
    pid    start at pid, default 1 (init))
    user   show only trees rooted at processes of that user

//////////////////////////////////////////////////////////////////////////

#pstree

#pstree  -a
---> 커맨드 라인 인자값 출력

#pstree  -n
---> PID 로 정렬

#pstree  -p
---> PID 출력

#pstree  -np
---> PID 로 정렬 및 PID 출력

#pstree  -au
---> 인자값 및 사용자 전이 출력


☞시그널(Signal) : 리눅스 프로그램에 보내는 신호

☞시그널이 발생하는 경우
1)키보드를 통해 : ctrl + c(인터럽트), ctrl + z(정지)
2)커널 내부에서 발생
3)다른 프로세스에 의해서



☞시그널 종류
#kill  -l
1  HUP, 헙시그널(일반 명령어는 종료, 데몬 프로세스의 경우 설정 파일을 다시 읽음)
2  INT, 인터럽트(단축키는 ctrl + c)
9  KILL, 강제종료(미사일)
15 TERM, 자연스럽게 종료(디폴트 시그널, 총)
19 STOP, 실행정지(ctrl + z)



//////////////////////////////////////////////////////////////////////////
hang up
전화를 끊다 

After I hung up I remembered what I'd wanted to say.
나는 전화를 끊은 후에 하고 싶었던 말이 생각났다.

Wait a minute, and don't hang up the phone. 
전화 끊지 말고 잠시 기다리세요
//////////////////////////////////////////////////////////////////////////

☞kill 명령어
프로세스에게 시그널을 보냄

형식)
kill  PID(숫자)
kill  -9  PID1  PID2
kill  -SIGINT  1234(PID)
kill  -int  1235(PID)
kill  -s  SIGINT  1236(PID)
kill  %작업번호


kill 다음에는 프로그램 이름을 적으면 안 됨
#kill   gcalctool
---> X

백그라운드로 계산기 3개 실행하기(#gcalctool &)

#ps  -ef  |  grep  gcalctool
UID   PID   PPID  C  STIME   TTY    TIME      CMD

root  3201  2521  0  16:17   pts/1  00:00:00  gcalctool
root  3202  2521  0  16:17   pts/1  00:00:00  gcalctool
root  3203  2521  0  16:17   pts/1  00:00:00  gcalctool

grep gcalctool 은 ps -ef | grep gcalctool 명령어 자신이 출력된 것임

PID(Process ID)             : 프로세스 아이디
PPID(Parent Process ID) : 부모프로세스 아이디
                                  (gcalctool 의 부모프로세스는 bash 쉘이 된다.)


#kill  1234(자신의 가상머신 터미널에서 출력된 PID 사용하기)
디폴트로 15번 시그널 전달
종료됨 출력

#kill  -9  1235(두번째 계산기 프로그램 번호)
9번 시그널 전달
죽었음 출력

#kill  -2  1236
인터럽트 시그널 전달
인터럽트 출력


☞killall  명령어
동일한 이름의 여러 프로세스에게 시그널을 보낼 때 사용

killall  -l
killall  -s  시그널문자(대문자)   프로그램이름
killall  -시그널숫자  프로그램이름
killall  -시그널문자(대문자)  프로그램이름


☞skill  명령어
시스템에 접속해 있는 사용자를 추방 할 때
공격자를 차단할 경우


skill  -KILL(소문자 가능)   apple(사용자명)
skill  -KILL   pts/터미널번호
skill  -STOP   apple
skill  -CONT  apple


☞sleep
sleep  초
#sleep  3


▣실습
1. Putty 이용하여 루트 로 로그인하기
2. /usr/lib 디렉토리를 /tmp 로 복사하되 중간에 중지시키고 백그라운드로 실행하기
3. find 이용하여 / 부터 확장자 jpg 파일을 찾아  /work/find.txt 로 저장하기
   (백그라운드 실행)
4. sleep 3000 실행후 중지시키고 kill 이용하여 종료하기


//////////////////////////////////////////////////////
#cp  --help
-R, -r      copy  directories
#cp  -R  /usr/lib  /tmp 
Ctrl + z
#jobs
#bg     또는  #bg  %작업번호
--->작업 번호를 생략하면 현재 작업(jobs 에서 + 표시)을 전환

#find  /  -name  "*.jpg"  >  /work/find.txt  &

#sleep  3000
Ctrl + Z
#jobs  -l
#kill  PID
#jobs  -l
#kill  -9  PID
#jobs  -l
//////////////////////////////////////////////////////





