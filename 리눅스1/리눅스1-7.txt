
[ITBANK Andylec 주말 리눅스 1 과정]

▣오늘의 수업내용(7일차)
하드디스크 관리

▣용어 정리
☞파일 시스템(File System)
자료(data)를 저장하고 찾기 쉽도록 만들어 놓은 방법, 체계적인 구조


☞파일시스템의 종류
FAT  : windows 구버전(windows 98)이 사용
NTFS : windows 2000 이상이 사용
ext2 : 구버전 리눅스가 사용
ext3 : CentOS 5 버전에서 사용
ext4 : CentOS 6 버전에서 사용
UFS  : 유닉스가 사용(솔라리스)


▲하드디스크(또는 CD-ROM Drive) 장치명
(E-IDE 또는 PATA)
primary     master   : /dev/hda (첫번째 IDE 하드디스크 또는 CD-ROM)
primary     slave     : /dev/hdb (두번째 IDE 하드디스크 또는 CD-ROM)
secondary  master   : /dev/hdc
secondary  slave     : /dev/hdd

(SCSI)
/dev/sda (첫번째 스카시 하드디스크)
/dev/sdb (두번째 스카시 하드디스크)
/dev/sdc
.....

SATA 방식의 하드디스크는 /dev/sd? 로 리눅스에서 인식된다.

CentOS 6 버전에서는 IDE 방식도 /dev/sd? 로 표시 됨



IDE,E-IDE : ATA, PATA
SATA      : Serial ATA
 
▲전송 인터페이스  
1. SASI: SCSI의 모태이다. 
2. SCSI (스커지): 병행연산 버스의 원형이다. 
3. ST-506(시게이트 인터페이스): 현재의 플로피 디스크를 제어하는 것과 동일한 MFM 방식이다. 
4. ST-412(시게이트 인터페이스): MFM 방식에 RLL 압축 기술을 적용하여 용량을 늘렸다. ST-506를 개량한 것이다. 
ESDI: ST-412/506에 비해 동작 속도가 급격히 빨라졌지만, 이전의 규격들과 호환되지 않는다. 
5. ATA: 초기의 병렬 방식인 ATA와 2003년에 개발된 직렬방식인 SATA가 있다. 
 
출처 : http://ko.wikipedia.org


▣디스크 관리 테스트
새로운 하드디스크를 추가하기 위해서 리눅스 가상머신을 종료한다.
(리눅스 가상머신이 부팅 된 상태  또는  일시정지  상태(|| 로 표시) 에서는 
가상 하드디스크 추가가 안 된다.)

[cent]
#poweroff

▲SCSI 방식 2G 가상 하드디스크 2개 추가하기
1) vmware 메뉴표시줄-VM-Settings
2) Add 버튼-Hard Disk 선택-Next
3) Create a new virtual disk 선택(첫번째 버튼)-Next
4) Virtual disk type : SCSI 선택-Next
5) Disk Capacity-2G 로 설정-Next
6) Disk file(가상하드디스크 저장 파일명, 디폴트값 그대로 사용)-finish
7) OK

하드디스크 추가후 Linux 부팅시키기

부팅시 멈추면 사각형 종료 버튼(□) 누른 후 다시 전원 버튼(▷)을 눌러서 부팅시켜 본다. 

dmesg : 부팅시 커널이 발생한 메시지 출력 명령

#dmesg
#dmesg  |  grep sd
---> 부팅시에 커널이 새로운 하드웨어를 인식한 것을 알 수 있다.



//////////////////////////////////////////////////////
결과 캡춰
#dmesg | grep sd
SCSI device sda: 16777216 512-byte hdwr sectors (8590 MB)
sda: cache data unavailable
sda: assuming drive cache: write through
SCSI device sda: 16777216 512-byte hdwr sectors (8590 MB)
sda: cache data unavailable
sda: assuming drive cache: write through
 sda: sda1 sda2 sda3
Attached scsi disk sda at scsi0, channel 0, id 0, lun 0
EXT3 FS on sda1, internal journal
EXT3 FS on sda3, internal journal
Adding 522104k swap on /dev/sda2.  Priority:-1 extents:1
#

//////////////////////////////////////////////////////


<하드디스크 작업 순서>
1. 물리적 부착
2. fdisk 로 파티션 생성
3. mkfs.ext4 로 포맷하기
4. 마운트해서 사용하기


▲fdisk 명령어
1)fdisk  -l
디스크 정보 확인

2)fdisk  -l  /dev/sda
특정 디스크 정보 확인

3)fdisk  /dev/장치명
디스크 파티션 구성


▲fdisk 내부에서 사용하는 명령어
a : 부트 플래그 설정
l : 파티션 목록(list)
n : 새 파티션 생성(new)
t : 파티션 변경(toggle,change)
w : 저장(write)
p : 파티션 출력(print)
q : 종료(quit)
d : 삭제(delete)


▲파일시스템 생성(포맷 개념)
1) mkfs.ext4  /dev/sdb1
2) mkfs  -t  ext4  /dev/sdb1

mkfs ---> make filesystem

mkfs.ext2
mkfs.ext3
mkfs.ext4


▲마운트 와 언마운트
리눅스는 모든 것을 파일로 간주한다.
하드디스크, CDROM 드라이브도 하나의 장치파일(Device File)로 간주한다.
사용자 입장에서는 하드디스크 장치파일을 통해서 
데이타를 접근할 수 없고 
장치파일을 디렉토리에 연결하는 작업(마운트)을 
통해서 데이타에 접근할 수 있다.

마운트   : 파일시스템(장치)을 디렉토리에 연결하는 작업
             명령어 ---> mount
언마운트 : 파일시스템(장치)을 디렉토리와 연결해제 하는 작업
              명령어 ---> umount(unmount 가 아님)

▲마운트 및 언마운트 형식

mount  -t 파일시스템타입  장치파일  마운트디렉토리
(마운트 디렉토리는 임의로 지정 가능하다.)

mount  -t  ext4  /dev/sdb1  /disk2
(-t ext4 는 생략 가능)


umount  마운트디렉토리 또는 umount  장치명(/dev/hdc)


▲하드디스크 구성 테스트

#ls  /dev/sd*


#fdisk -l
-l(list)

Disk /dev/sda: 8589 MB, 8589934592 bytes
255 heads, 63 sectors/track, 1044 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *           1         765     6144831   83  Linux
/dev/sda2             766         830      522112+  82  Linux swap / Solaris
/dev/sda3             831        1044     1718955   83  Linux
#

Id 83 은 리눅스 데이타 파티션을 의미하고
Id 82 는 리눅스 스왑 파티션을 의미한다.


수업용 하드디스크 구분:

[/dev/sda]              [/dev/sdb]              [/dev/sdc]
첫번째 하드디스크    두번째 하드디스크     세번째 하드디스크
(부트디스크)



▷파티션
주파티션은 1-4번이고
5번 부터는 확장파티션 안의 논리파티션(logical partition)이다.

주파티션   : primary partition(4개 까지 가능)
확장파티션 : extended partition
논리파티션 : logical partion(번호가 5번 부터 할당)

파티션을 5개 이상 만드려면
확장파티션을 만들고 그 안에 논리 파티션을 만들어야 한다.

최대 파티션 수는 CentOS 5버전 까지는 15개 이다.
(주파티션 3개 + 확장 파티션 1개 + 논리 파티션 11개)

[주파티션1 | 주파티션2 | 주파티션3 | 확장파티션(논리파티션5 | 논리파티션6 ...)]

CentOS 6 버전에서는 논리파티션수에 제한 없음
확장파티션은 포맷해서 사용할 수 없음



Q)확장 파티션(extended partition) 은 몇개 만들 수 있는가 ?
A)1 개

Q)주파티션(primary partition)안에 논리파티션(logical partition)을 만들 수 있는가 ?
A)No


▷파티션 구성

#fdisk  /dev/sdb
Command (m for help): m 입력

 p   print the partition table

Command (m for help): l(엘) 입력
파티션 종류 출력


Command (m for help): n(파티션 새로 생성)
Command action
   e   extended
   p   primary partition (1-4)

p (엔터)
Partition number (1-4): 1
First cylinder : 엔터
Last cylinder : +1G
(총 2G 에서 1G 만 할당)
+ 를 생략하면 실린더수로 인식 됨

실린더가 모여서 파티션을 이룬다.


Command (m for help): p


Command (m for help): w(저장후 종료)
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
#

#ls /dev/sd*


실습용 리눅스 가상머신의 하드디스크 구분 :
/dev/sda : 첫번째 하드디스크(부트디스크)
/dev/sdb : 두번째 하드디스크
/dev/sdc : 세번째 하드디스크


#fdisk -l(엘)  /dev/sdb


▷파일시스템 생성하기-윈도우의 포맷개념
#mkfs.ext4  /dev/sdb1


▷마운트
#mkdir  /disk2

#mount    /dev/sdb1  /disk2
또는
#mount  -t  ext4  /dev/sdb1  /disk2 
-t ext4 는 생략가능

#cat  /etc/filesystems
---> 파일 시스템 종류

#df  -h
-h : human readable


#cd  /disk2
#pwd
/disk2
#

#cat  >  test.txt  
apple
orange
mango
ctrl+d 입력 : 입력 종료 단축키
#

#ls
#cat   test.txt
appple
orange
mango
#


▷마운트 해제
마운트 해제를 할 때는 마운트 된 디렉토리에서 umount 를 하면 안 됨
#pwd
/disk2
#cd
#pwd
/root
#umount  /disk2
#df  -h

/////////////////////////////////////////////////////////////////////
마운트 해제가 안 되면 fuser -u 로 프로세스 확인후
fuser -k 로 프로세스 강제 종료후 마운트 해제를 할 수 있다.

fuser  -u  /disk2
fuser  -k  /disk2
umount  /disk2

/////////////////////////////////////////////////////////////////////


▣실습
1. /disk3  /disk4 디렉토리 생성(#mkdir  /disk3  /disk4)
2. 두번째 하드디스크(/dev/sdb) 남은 용량을 파티션 설정(/dev/sdb2)하고
ext4 파일시스템생성(포맷)한 후 /disk3 디렉토리에 마운트 테스트하기
(주의 : /dev/sdb1 을 마운트 해제한 후 작업해야 함,
마운트 해제를 하지 않으면 장치 파일이 생성되지 않는다.)
3. 세번째 하드디스크(/dev/sdc) 를 아래와 같이 파티션 생성
(마지막 파티션 용량은 정확하게 400M 이 되지 않아도 된다.)

[ 주파티션1 | 주파티션2 | 확장파티션3(논리파티션5,논리파티션6,논리파티션7)]
      400M      400M                 1.2G(400M,400M,400M)    

fdisk 사용시)
파티션 생성 : n 
파티션 삭제 : d
파티션 저장 : w
파티션 출력 : p
메뉴 출력    : m


//////////////////////////////////////////////////////
#cd
#pwd
/root
#umount  /dev/sdb1

#fdisk  /dev/sdb
Command (m for help): p

Disk /dev/sdb: 2147 MB, 2147483648 bytes
255 heads, 63 sectors/track, 261 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x2154df34

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1         132     1060258+  83  Linux

Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p
Partition number (1-4): 2
First cylinder (133-261, default 133): 엔터
Using default value 133
Last cylinder, +cylinders or +size{K,M,G} (133-261, default 261): 엔터
Using default value 261

Command (m for help): p

Disk /dev/sdb: 2147 MB, 2147483648 bytes
255 heads, 63 sectors/track, 261 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x2154df34

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1         132     1060258+  83  Linux
/dev/sdb2             133         261     1036192+  83  Linux

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
#



#mkfs.ext4   /dev/sdb2
mke2fs 1.41.12 (17-May-2010)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
64768 inodes, 259048 blocks
12952 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8096 inodes per group
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376

Writing inode tables: done                            
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 31 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.


#mkdir   /disk3
#mount   /dev/sdb2   /disk3
#df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1              13G  3.3G  8.7G  28% /
tmpfs                 504M  260K  504M   1% /dev/shm
/dev/sda3             5.3G  143M  4.9G   3% /home
/dev/sr0              3.5G  3.5G     0 100% /media/CentOS_6.3_Final
/dev/sdb2             996M   18M  929M   2% /disk3
#

//////////////////////////////////////////////////////

<자동마운트>
▲부팅시 자동 마운트 설정파일
#cat  /etc/fstab


▲/etc/fstab : 부팅시 자동마운트 설정파일의 형식

1)장치명 또는 파티션 레이블(LABEL) 또는 UUID
2)마운트할 디렉토리
3)파일 시스템 형식
4)옵션
5)덤프값 : dump 라는 프로그램으로 덤프여부, ext4 는 1, 다른 파티션은 0
6)파일시스템점검순서 : 루트파티션(ext4)은 1, 다른 파티션(ext4)은 2, 그 외 파티션은 0

UUID :
UUID stands for Universally Unique IDentifier and it is used in Linux to identify disk in the /etc/fstab file

blkid : UUID 확인




☞부팅시 자동마운트 테스트
자동마운트를 테스트 하기 전에 /dev/sdb1 을 /disk2 에 수동마운트 해 본다.
mount  /dev/sdb1  /disk2
df  -h
수동마운트가 안 되는 디스크를 자동마운트 설정하면 리부팅 할 때 멈춤







#vi  /etc/fstab
마지막 라인에 추가
/dev/sdb1      /disk2          ext4      defaults     1  2

저장후 종료

리부팅 해서 확인
#reboot

/////////////////////////////////////////////////////////////////////
부팅중에 멈추면 루트 암호 입력
#mount  -o  remount,rw  /
한 후 /etc/fstab 파일을 vi 이용하여 /dev/sdb1 라인을 삭제하고
저장및 종료한 후 리부팅
/////////////////////////////////////////////////////////////////////

루트로 로그인
#df  -h


결과 확인후 /etc/fstab 에서
/dev/sdb1 라인 삭제


▣아이노드와 링크

☞리눅스 파일시스템의 구성요소

[Boot Block(MBR)  |  Super Block  |  Inode(meta data)  |  Data Block]

1. Boot Block(MBR) : 부팅할 때 실행되어야 할 코드가 담긴 부분
2. Super Block(수퍼 블록) : 파일시스템의 전체적인 정보를 갖는다.(파일시스템이 생성된 시각, Inode 갯수 등)
3. Inode(아이노드, meta data) : 파일의 이름을 제외한 해당 파일의 모든 정보를 갖고 있다.
4. Data Block(데이타 블록) : 데이타가 존재하는 블록

☞Inode Table
파일의 종류와 접근모드(rwx)
파일의 UID, GID
파일의 접근시간, 수정시간 ,아이노드 변경시간
데이터 저장에 사용된 총 데이터 블록수
데이터가 저장된 블록에 대한 포인터
총15개의 데이터 블록 포인터(주소정보)를 갖고 있다.


☞ext4 파일시스템은 ext2 와 구조는 같고 파일저장시 로그를 
남기는 저널링 기능이 포함된 형태이다.

◐dumpe2fs : 파티션 논리적인 구조를 볼 수 있는 명령어
		   (수퍼 블록 출력)

#dumpe2fs  /dev/sda3

dumpe2fs 1.35 (28-Feb-2004)
Filesystem volume name:   /home
Last mounted on:          <not available>
Filesystem UUID:          6b361661-6db7-4f63-a81c-da58b686f939
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      has_journal ext_attr resize_inode dir_index fil
etype needs_recovery sparse_super large_file
Default mount options:    (none)
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              570080
Block count:              1138606
Reserved block count:     56930
Free blocks:              1110280
Free inodes:              570069
First block:              0
Block size:               4096
Fragment size:            4096
Reserved GDT blocks:      277
Blocks per group:         32768
Fragments per group:      32768
Inodes per group:         16288
Inode blocks per group:   509
Filesystem created:       Tue Feb  8 20:05:13 2011
Last mount time:          Tue Feb  8 11:50:40 2011
Last write time:          Tue Feb  8 11:50:40 2011
Mount count:              2
Maximum mount count:      -1
Last checked:             Tue Feb  8 20:05:13 2011
Check interval:           0 (<none>)
Reserved blocks uid:      0 (user root)
Reserved blocks gid:      0 (group root)
First inode:              11
Inode size:               128
Journal inode:            8
Default directory hash:   tea
Directory Hash Seed:      4c36ba93-e489-44ab-bd5a-6534c8cd0fc0
Journal backup:           inode blocks


Group 0: (Blocks 0-32767)
  Primary superblock at 0, Group descriptors at 1-1
  Block bitmap at 279 (+279), Inode bitmap at 280 (+280)
  Inode table at 281-789 (+281)
  23769 free blocks, 16277 free inodes, 2 directories
  Free blocks: 8999-32767
  Free inodes: 12-16288
Group 1: (Blocks 32768-65535)
  Backup superblock at 32768, Group descriptors at 32769-32769
  Block bitmap at 33047 (+279), Inode bitmap at 33048 (+280)
  Inode table at 33049-33557 (+281)
  31962 free blocks, 16274 free inodes, 4 directories
  Free blocks: 33558-55295, 55312-65535
  Free inodes: 16303-32576
Group 2: (Blocks 65536-98303)
  Block bitmap at 65536 (+0), Inode bitmap at 65537 (+1)
  Inode table at 65538-66046 (+2)
  32257 free blocks, 16288 free inodes, 0 directories
  Free blocks: 66047-98303
  Free inodes: 32577-48864
Group 3: (Blocks 98304-131071)
  Backup superblock at 98304, Group descriptors at 98305-98305
  Block bitmap at 98583 (+279), Inode bitmap at 98584 (+280)
  Inode table at 98585-99093 (+281)
  31978 free blocks, 16288 free inodes, 0 directories
  Free blocks: 99094-131071
  Free inodes: 48865-65152
Group 4: (Blocks 131072-163839)
  Block bitmap at 131072 (+0), Inode bitmap at 131073 (+1)
  Inode table at 131074-131582 (+2)
  32257 free blocks, 16288 free inodes, 0 directories
  Free blocks: 131583-163839
  Free inodes: 65153-81440
Group 5: (Blocks 163840-196607)
  Backup superblock at 163840, Group descriptors at 163841-163841
  Block bitmap at 164119 (+279), Inode bitmap at 164120 (+280)
  Inode table at 164121-164629 (+281)
  31978 free blocks, 16288 free inodes, 0 directories
  Free blocks: 164630-196607
  Free inodes: 81441-97728
Group 6: (Blocks 196608-229375)
  Block bitmap at 196608 (+0), Inode bitmap at 196609 (+1)
  Inode table at 196610-197118 (+2)
  32257 free blocks, 16288 free inodes, 0 directories
  Free blocks: 197119-229375
  Free inodes: 97729-114016
Group 7: (Blocks 229376-262143)
  Backup superblock at 229376, Group descriptors at 229377-229377
  Block bitmap at 229655 (+279), Inode bitmap at 229656 (+280)
  Inode table at 229657-230165 (+281)
  31978 free blocks, 16288 free inodes, 0 directories
  Free blocks: 230166-262143
  Free inodes: 114017-130304
Group 8: (Blocks 262144-294911)
  Block bitmap at 262144 (+0), Inode bitmap at 262145 (+1)
  Inode table at 262146-262654 (+2)
  32257 free blocks, 16288 free inodes, 0 directories
  Free blocks: 262655-294911
  Free inodes: 130305-146592
Group 9: (Blocks 294912-327679)
  Backup superblock at 294912, Group descriptors at 294913-294913
  Block bitmap at 295191 (+279), Inode bitmap at 295192 (+280)
  Inode table at 295193-295701 (+281)
  31978 free blocks, 16288 free inodes, 0 directories
  Free blocks: 295702-327679
  Free inodes: 146593-162880
Group 10: (Blocks 327680-360447)
  Block bitmap at 327680 (+0), Inode bitmap at 327681 (+1)
  Inode table at 327682-328190 (+2)
  32257 free blocks, 16288 free inodes, 0 directories
  Free blocks: 328191-360447
  Free inodes: 162881-179168


stat : 아이노드 정보확인 
#stat  파일명

※링크는 
1)디렉토리의 규칙성을 유지하기 위해서
2)긴 이름을 짧은 이름 또는 쉬운 이름으로 사용하기 위해서 
3)리눅스 서버 설정할 때 이용된다.

#ll  /etc/grub.conf

▷링크테스트를 위한 파일 생성
#cd  /work
#vi  run.sh (--->간단한 형태의 스크립트 파일)
date
cal

#ll  run.sh
#./run.sh
---> X

#chmod u+x run.sh
#ll run.sh
-rwxr--r--  1 root root 9 Aug 12 14:22 run.sh
스크립트 파일의 경우 r 과 x 권한이 있어야
일반계정도 실행할 수 있고
루트의 경우에는 실행권한만 있어도 된다.

//////////////////////////////////////////////////////
캡춰 결과
[root@cent work]# ll run.sh
-rw-r--r--  1 root root 9 10월  8 00:08 run.sh
[root@cent work]# chmod u+x run.sh
[root@cent work]# ./run.sh
//////////////////////////////////////////////////////


◆하드 링크 생성 방법
ln  원본파일명  링크파일명


#ll run.sh
-rwxr--r--  1 root root 9  7월 15 13:14 run.sh
#
#ln  run.sh  good.sh
#ll
합계 8
-rwxr--r--  2 root root 9  1월  7 12:31 good.sh
-rw-r--r--  1 bin  root 0  1월  7 11:50 hello.exe
-rwxr--r--  2 root root 9  1월  7 12:31 run.sh
#
#./good.sh (run.sh 를 실행한 것과 동일)

#ll run.sh good.sh
-rwxr--r--  2 root root 9 Aug 12 14:22 good.sh
-rwxr--r--  2 root root 9 Aug 12 14:22 run.sh
#

#ls -il (아이노드 넘버 출력 ls 옵션 : -i)
합계 8
376145 -rwxr--r--  2 root root 9  1월  7 12:31 good.sh
376143 -rw-r--r--  1 bin  root 0  1월  7 11:50 hello.exe
376145 -rwxr--r--  2 root root 9  1월  7 12:31 run.sh
#
---> 하드링크 파일은 아이노드가 똑 같다.
      복사한 경우에는 아이노드가 틀리다.


◆하드링크 예
#ls  -il  /usr/bin/unzip  /usr/bin/zipinfo   /bin/ls
#chmod  g-r,o-r  good.sh
#ll  run.sh good.sh (또는 ll  *.sh)
-rwx------  2 root root 9 Aug 12 14:22 good.sh
-rwx------  2 root root 9 Aug 12 14:22 run.sh
#
하드링크는 아이노드 넘버가 동일하므로 둘 다 똑같이 출력된다.
#rm run.sh
rm: remove regular file `run.sh'? y
#ls
ex3.txt   good.sh       hell.exe  hello.exe  services

#./good.sh (원본을 지워도 하드링크 파일로 실행할 수 있다.)

#ll good.sh 
(원본을 삭제했으므로 링크카운트가 2에서 1로 감소)
-rwx------  1 root root 9 Aug 12 14:22 good.sh
#

◆심볼릭 링크 생성 : -s 옵션 사용
ln  -s  원본파일명  링크파일명

-하드링크는 파티션이 다르면 사용할 수 없고
심볼릭 링크는 파티션이 달라도 사용할 수 있다.
-심볼릭 링크는 파일 과 디렉토리 모두 링크 시킬 수 있다.
(하드링크는 파일만 링크가능)

#cd  /work
#pwd
/work
#ll  *.sh
#ln  -s  good.sh  go
#

#ll good.sh go
lrwxrwxrwx  1 root root 7 Aug 12 14:47 go -> good.sh
-rwx------  1 root root 9 Aug 12 14:22 good.sh
#
---> 심볼릭 링크파일은 l 로 시작해서 퍼미션이 모두 
셋팅되서 나타나므로 실제 퍼미션은 원본 파일을 확인해야 한다.


#./go(--->good.sh 가 실행된다.)
#ls  -il  good.sh  go
981304 lrwxrwxrwx  1 root root 7 Aug 12 14:47 go -> good.sh
981301 -rwx------  1 root root 9 Aug 12 14:22 good.sh
#
---> 심볼릭 링크는 새로운 파일이므로 아이노드 번호가 원본과 틀리다.

#chmod u-w go
#ls -il good.sh go
981304 lrwxrwxrwx  1 root root 7 Aug 12 14:47 go -> good.sh
981301 -r-x------  1 root root 9 Aug 12 14:22 good.sh
#
---> 원본의 퍼미션이 변경된다.

#rm  good.sh
#ll
#./go
--->원본 파일을 삭제했으므로 실행되지 않는다.

▣실습
1. /admin 폴더 생성
2. df  -h, cal, date 를 실행하는 스크립트 생성 및 실행권한 주기
(/admin/admin.sh)
3. admin.sh 파일의 하드링크 생성(/admin/system.sh)
4. admin.sh 파일의 심볼릭 링크 생성(/sbin/check.sh)
5. /longnamedirectory 생성
6. /longnamedirectory/hereislong.txt 파일 생성
7. longnamedirectory 의 심볼릭 링크 생성(/lnd)
8. 테스트
#/admin/admin.sh
#check.sh
#cd  /
#ls
#cd  lnd
#pwd
#ls

///////////////////////////////////////////////////////////
#mkdir  /admin
#cd  /admin
#vi  admin.sh
df  -h
cal
date
#chmod  u+x  admin.sh
#./admin.sh
#ln  admin.sh  system.sh
#./system.sh

#/admin/admin.sh

#ln  -s  /admin/admin.sh   /sbin/check.sh
---> 원본과 링크 파일의 디렉토리가 틀린 경우는
       링크 파일 만들 때 경로를 지정해야 함
 

#ll  /sbin/check.sh  
#check.sh

#cd  /
#mkdir   longnamedirectory
#touch  /longnamedirectory/hereislong.txt
#ln  -s  /longnamnedirectory  /lnd
#ll
#cd   lnd
#pwd
/lnd
---> 실제로는 /longnamedirectory 로 이동 된 것임
#ls

///////////////////////////////////////////////////////////






