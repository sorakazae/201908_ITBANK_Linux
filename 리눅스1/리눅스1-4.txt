
[ITBANK Andylec  주말 리눅스 1 과정]

▣오늘의 수업내용(4일차)
쿼팅(Quoting)
리다이렉션(Redirection)
grep


<리눅스 기본 명령어>

☞head
파일의 앞쪽 부분 10줄 출력
옵션 : -숫자(출력 행수 지정)

#head       /etc/passwd
---> /etc 는 폴더(디렉토리), passwd 파일

#head  -3  /etc/passwd


☞tail
파일의 뒷쪽 부분 10줄 출력
옵션)
-숫자(출력 행수 지정)

#tail       /etc/passwd
#tail  -3  /etc/passwd



☞more
파일의 내용을 한페이지씩 확인 할 때
PageUp, PageDown, 화살표키 사용 불가

#more  /etc/services
한 페이지씩 출력
space bar // next page
q // 종료

#more  -d  /etc/services
-d  // 디스플레이 옵션

f      //  다음 페이지(next page)
b     //  이전 페이지(previous page)
엔터  //  다음 라인(next line)


☞file
대상 파일의 종류(type)를 출력

#file  /bin/ls
#file  /etc/hosts


☞rdate
외부 타임서버와 시스템의 시간을 맞출 수 있다.

#rdate  -p  time.bora.net
타임서버의 시간출력

#rdate  -s  time.bora.net
자신의 컴퓨터 시간을 타임서버와 동기화

#date


<쿼팅(Quoting)>
작은따옴표, 큰따옴표, \ 사용하는 것을 쿼팅 이라 한다.
쉘이 특별하게 생각하는 문자의 의미를 제거할 때 사용한다.


1) ' 작은따옴표
2) " 큰따옴표
3) \ 역슬래쉬(해석금지의 의미)


---> 변수의 경우 '(작은따옴표) 는 $ 표시와 변수이름 자체가 출력되고
      " 는 변수의 값이 출력된다.
---> 작은 따옴표와 큰따옴표를 섞어서 사용하면 안 됨
---> 문자열에 공백이 들어간 경우에도 쿼팅을 사용할 수 있다.


#echo '$LANG' 
---> 변수이름 출력(변수 해석 안 함)

#echo "$LANG" 
--->변수 값 출력(변수 해석 함)

#echo  $LANG 
---> 변수 값 출력


#echo  \$LANG
---> 변수 해석(또는 변수치환) 금지



☞명령어 치환
` 역따옴표 : 1번키 왼쪽키, Back Quote
`(역따옴표) 는 명령어의 결과를 변수에 저장할 때 쓰인다.

#temp=`date` 
---> 역따옴표 사용
---> = 사이에 공백이 있으면 안 됨
---> date 명령어의 결과(return 값)가 메모리상의 temp 라는 변수에 저장 됨

#echo  $temp

#temp='date' 
---> 작은따옴표

또는 

#temp="date"
---> date 라는 문자열이 변수에 저장 됨

#echo  $temp


☞틸드(~) 치환
#echo  ~
홈디렉토리 출력

#cd  ~사용자계정명
지정한 사용자의 홈디렉토리로 이동

#cd  ~-  또는  #cd  -
바로 이전의 작업 디렉토리로 이동


<치환 정리>
1. 변수치환($ 사용)
2. 명령어 치환(` 사용)
3. 틸드 치환(~ 사용)


""(큰따옴표) 만 변수치환, 명령어 치환을 허용함


▷find 명령어
1. find 형식 
find  <탐색을 시작할 경로>  [옵션]

파일이 어느 경로에 있는지 모를 때는 / 를 사용하면 된다. 
최상위 부터 검색하므로 시간이 많이 걸린다.
탐색 경로를 생략하면 현재 디렉토리(폴더)를 기준으로 찾는다.

2. find 옵션
-name        // 이름으로 검색
-empty       // empty 파일 검색
-uid UID     // UID(사용자 번호)로 검색
-gid GID     // GID(그룹 번호)로 검색
-perm        // 퍼미션으로 검색
-user         // 소유자로 검색
-group       // 그룹으로 검색
-exec         // 찾은 파일을 대상으로 명령어 실행
-ok            // exec 와 비슷하나 질문 출력
-atime  -3   // Access time(접근 시간)이 3일 보다 작은 파일
-atime  +3  // Access time(접근 시간)이 3일 보다 큰 파일
-newer   hello.c  // 지정한 파일(hello.c) 이후에 수정된 파일 검색


#mkdir  /work5
#cd  /work5
#touch  test1.txt  test2.txt  cent.dat  nice.c
#ls 

#find  /work5  -name  *
---> X (실행 안 됨)
#find   /work5  -name  *.txt
---> X (실행 안 됨)
---> /work5 부터 txt 로 끝난 모든 파일을 찾으라는 의미

#find  /work5  -name  "*" 
---> O
#find  /work5  -name  '*' 
---> O
#find  /work5  -name  \*
---> O

※쉘명령어 사용시 * 나 공백이 들어간 경우 
  쉘이 특별하게 생각하기 때문에 결과가 올바르게 
  나오지 않을 수 있다.
  이 때는 쿼팅을 사용하면 된다.



#man  find

//////////////////////////////////////////////////////////////////////////
NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [path...] [expression]

       This  happens  because  *.c has been expanded by the shell resulting in
       find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of  doing  things
       this way, you should enclose the pattern in quotes:
       $ find . -name ´*.c´ -print
//////////////////////////////////////////////////////////////////////////


☞파일을 찾아서 지우는 예제
#mkdir  /work7
#cd   /work7
#touch  user1.txt  user2.txt  cent.dat


#find  /work7  -name  cent.dat  -exec  rm  {}  \;
---> 질문없이 바로 삭제 된다.

{} 는 찾은 파일을 의미하고 
\; 는 명령어가 끝났음을 의미한다.
{} 와  \;  는 공백없이 타이핑


※세미콜론(;)의 의미
명령어를 연속적으로 실행시킬 때 사용하는 기호

#date  ;  cal  ;  ls


<Redirection(방향 재지정)>

1) >  출력(기존의 파일이 있으면 overwrite 됨)
2) >> append(기존내용에 추가하기)
3) <  입력
4) << 입력 종료 문자 지정




리눅스의 내부 통로
리눅스 운영체제 내부에는 데이터가 이동하는 3가지 통로가 있다.

표준입력(Standard Input, stdin)  ---> 0 : 키보드와 연결
표준출력(Standard Output, stdout) ---> 1 : 모니터와 연결
표준에러(Standard Error, stderr) ---> 2 : 모니터와 연결


--------------------------- 
Standard Input        0    <------------   키보드
---------------------------
 
---------------------------
Standard Output      1     -------+          
---------------------------             |
                                              +--->  모니터
---------------------------             |
Standard Error         2     -------+              
---------------------------


#cd  /work
#pwd
/work
#vi  result.txt

redirection test

#cat  result.txt
#cat  <  result.txt 
---> cat  result.txt 와 동일하다


#cat 
---> 입력 리다이렉션(< 기호)를 사용하지 않았으므로
     키보드로부터 입력을 받으려고 커서가
     다음 줄로 넘어간다.
     ctrl + d 를 누르면 종료가 된다.

Ctrl + d // 입력 종료
Ctrl + c // 명령실행 중단(인터럽트)


#cat  > result.txt (키보드 입력을 받아 파일로 출력하라는 의미)
one
two
three
ctrl + d : 입력종료 단축키


#ls
#cat  result.txt
덮어쓰기(Overwrite)가 된 것을 확인할 수 있다.


#cat  >>  result.txt
four
five
six
ctrl + d(타이핑 하는 것이 아니고 
ctrl 키 누른 상태에서
d 키를 누르라는 의미)

#cat  result.txt
추가가 된 것을 확인할 수 있다.

#cat  >  result.txt  <<  EOF
kor
eng
math
eof
EOF(입력 종료 문자로 동작함)
#cat  result.txt



#cat  <<  C  >  test_file
지정된 문자열 "C" 가 입력되면 입력 중지

#cp
#cp  >  error.txt
#cat  error.txt 

#cp  2>  error.txt
#cat  error.txt


▷파이프(Pipe, |)
리눅스 명령어는 파이프( | )를 이용하여 여러 개를 연결해서 사용할 수 있다.
| ---> 백스페이스(←) 왼쪽키

#명령어1 | 명령어2 | 명령어3 ...


파이프(|) : 리눅스 명령어들을 연결해서 사용할 수 있는 기호
             파이프를 이용하면 한 명령어의 출력을 다른 명령어의
	     입력으로 사용하여 여러 명령어가 적용된 출력 결과를
	     얻어낼 수 있다.
	     A | B | C ...

▷sort 
정렬 명령
-r 은 역순 정렬 옵션(reverse)

#cd  /work
#cat  >  sort.txt
mango
apple
candy
banana
5
3
Ctrl + d
#cat  sort.txt
#sort  sort.txt
#sort  -r  sort.txt


#cat  /etc/passwd  |  sort  -r  |  more



//////////////////////////////////////////////////////
#cat  /etc/hosts
#cat  /etc/hosts  |  vi
모든 명령어가 파이프를 사용할 수 있는 것이 아니다.
#cat  /etc/hosts  |  vi  -
esc  :q!
#man  vi
-    stdin
//////////////////////////////////////////////////////

※ 파이프를 사용할 수 있는 명령어는 grep, more, sort 등 한정되어 있다.


▷용어정리
1. 메타 
근원적인 정의, 일련의 규칙


2. 메타문자(Metacharacters)
----------------------------------------------------------------
^ 시작을 의미, 또는 대괄호([  ]) 안에서는 except(제외) 를 의미
----------------------------------------------------------------
$ 줄의 끝을 의미
----------------------------------------------------------------
. 한 개의 문자를 의미
----------------------------------------------------------------
* 바로 앞의 문자(단어가 아님)가 0개 또는 반복을 의미
----------------------------------------------------------------
[ ] 문자를 집합으로 묶어 줌
----------------------------------------------------------------
\  특수 문자를 원래의 문자 의미 그대로 해석하게 해 줌
----------------------------------------------------------------
A\{숫자\} 문자 A 를 숫자 만큼 반복
----------------------------------------------------------------
A\{m,n\} 문자 A 를 m번에서 n번 반복
----------------------------------------------------------------


3. 정규표현식
어떤 문자열의 집합을 묘사하는데 사용되는 텍스트 스트링
특정 패턴을 찾는 규칙을 정규표현식(Regular Expression)이라 한다.


----------------------------------------------------------------
[ ] 범위를 지정, [a-z]* ---> 소문자
----------------------------------------------------------------
[^] ^ 다음의 문자를 제외(except)하는 의미, 
[^a-c] ---> a 에서 c 사이의 문자를 제외한 모든 문자를 나타냄
----------------------------------------------------------------
[0-9] 숫자를 의미
----------------------------------------------------------------


▷grep 명령어(필터링)
파일내에서 특정 패턴을 검색하여 그 패턴을 포함하는 모든 라인을
화면에 출력하는 명령어

☞grep 형식

1)
grep  검색단어  파일명

또는

2)
명령어  |  grep  검색단어


#cd
#pwd
/root
#vi  meta.txt
113
1133
11333
13
134
1334
13334
1345
14
x
y
c
d
B
F
Linux
*

사용 형식)
grep   "정규표현식"  파일명
grep   '정규표현식'   파일명
grep    정규표현식    파일명
--->예제에 따라 따옴표를 생략 가능한 경우도 있고
따옴표를 사용해야 결과가 정확히 나오는 경우도 있다.


#grep  "13."  meta.txt
--->점 자리에는 한 개의 문자가 반드시 있어야 함
--->13 은 출력 안 됨

#grep  "[xyz]"  meta.txt
--->x,y,z 중에 한 글자와 일치

#grep  "[a-z0-9]"  meta.txt
--->소문자 혹은 숫자와 일치

#grep  "[^b-d]"  meta.txt
--->b 에서 d 사이의 문자를 제외한 모든 문자를 나타냄

#grep  "[b-d]"  meta.txt
---> b 또는 c 또는 d 가 포함된 패턴 매칭

#grep  "^L"  meta.txt
---> L 로 시작되는 패턴


#grep  "1\{2\}"  meta.txt
---> 숫자 1 이 2번 반복되는 패턴 매칭


#grep  "1\{1,2\}"  meta.txt
---> 숫자 1 이 1번에서 2번 반복되는 패턴 매칭

#grep  Telnet  /etc/services
---> grep 은 대소문자를 정확하게 구분 함

#grep  -i  Telnet  /etc/services
-i  // ignore-case (대소문자 구분 안함)

#grep  -n  skytelnet  /etc/services
-n // line-number 출력

#grep  -c  skytelnet  /etc/services
-c // count (검색된 라인 갯수)


▣파일 다운
#yum  -y  install  ftp
---> 프로그램 설치

#ftp  아이피
Name : 아이디 입력
Password : 암호 입력(입력시 안 보이므로 정확히 타이핑하고 엔터를 누르면 된다.)

Login successful
ftp>ls
---> 서버쪽 파일 목록 확인
ftp>cd  120.UPLOAD2
---> 서버쪽 폴더 이동
ftp>pwd
---> 서버쪽 경로 이동
ftp>ls  ph*
ftp>get  phone.txt  
또는  mget  ph*
---> 파일 다운로드
ftp>by
---> ftp 접속 종료
#ls


▷Putty 설정 변경하기
1. putty 실행하기

putty 실행된 화면에서 아래와 같이 입력
Host Name : x.x.x.x (리눅스 아이피를 적는다.)
Port : 22
Connection Type(Protocol) : SSH 선택
Saved Sessions : WeekendLinux1AM10
Save 버튼 누르기

2. 왼쪽 메뉴에서 Window-Appearance 선택
   Font settings 항목의 Change 버튼 누르고 글꼴 선택
3. Window-Translation 선택
   Remote character set 을 UTF-8 로 선택
   ---> 한글 설정
4. Window-Colours
   Default Foreground(글자색) 선택후 Modify 버튼 눌러서
   원하는 색상 선택
   Default Background(배경색) 선택후 Modify 버튼 눌러서 
   원하는 색상 선택
5. 왼쪽 메뉴에서 Session 선택후 Save 버튼 누르기
6. Open 버튼 눌러서 루트 로그인 테스트 하기


▣실습
핸드폰(집전화) 번호 패턴을 정규표현을 통해 정의
1. 지역번호 및 통신사 번호는 '0' 으로 시작하는 2 혹은 3자리 숫자(02,032,010)
2. 중간자리 번호 패턴은 3자리 혹은 4자리가 반드시 한 번은 나와야 한다
3. 끝자리 번호 패턴은 4자리가 반드시 한 번은 나와야 한다

grep   정규표현식   phone.txt

phone.txt 파일이 없을 경우 수업용 FTP 서버 120.UPLOAD2 폴더에서 다운받아 사용

4. /etc/hosts 파일을 입력받아 /work/mydata.txt 파일로 출력하기(리다이렉션 이용)
5.  /AA  BB  폴더 생성하고  그 폴더로 이동 테스트(쿼팅 이용)


/////////////////////////////////////////////////////////////////////
#grep  "^0[0-9]\{1,2\}-[0-9]\{3,4\}-[0-9]\{4\}$" phone.txt


#cat  <  /etc/hosts  >  /work/mydata.txt
또는
#cat  >  /work/mydata.txt  <  /etc/hosts

#mkdir  "/AA  BB"  
#ls  /
#cd   "/AA  BB"

/////////////////////////////////////////////////////////////////////


▷awk
패턴을 스캐닝하여 처리하는 프로그램 언어

형식)
awk  '패턴'  파일명
awk  '{액션}'  파일명
awk  '패턴{액션}'  파일명

print ---> awk 에서 사용하는 출력함수
예)awk  '{print  "문자열"  $1}'  파일명

문자열은 큰따옴표로 감싸 주어야 하고
$1 을 "$1" 와 같이 큰따옴표로 감싸주면 변수처리 되지 않고 문자열로 처리 됨

-------------------
서울    apple 
부산    mango
인천    candy
-------------------
$1      $2

$1 은 첫번째 항목
$2 는 두번째 항목 을 의미
$0 는 행전체

//////////////////////////////////////////////////////////////////////////
#man  awk

GAWK(1)                        Utility Commands                       GAWK(1)

NAME
      gawk - pattern scanning and processing language
//////////////////////////////////////////////////////////////////////////


☞awk 예제

#awk   '/root/'  /etc/passwd
---> grep 처럼 사용한 예
---> 검색 패턴 /root/ 에서 /root 로 검색하면 에러 남



#awk  -F :  '/root/{print  $1, $2}'  /etc/passwd
-F : 는 항목 구분자를 지정(공통문자를 지정하는 옵션)
-F 생략시 공백이나 탭키를 한 라인에서 항목구분자로 사용

root 간 들어간 행을 검색한 후
:(콜론) 으로 구분하여 
첫번째 항목과 두번째 항목만 출력시키는 예제

a:b:c   ---> 항목 구분자는 :
a-b-c  ---> 항목 구분자는 -

#cd
#pwd
/root

데이타 파일 작성)
#vi  employees 
name     age     address     salary
bill      20      Seoul       1000
Billy     21      Pusan       2000
Jane      22      Daegu       3000
Cindy     23      Masan       4000

---> 입력시 탭키 한 번으로 항목 구분

#cat  employees
#cat  -A  employees
---> ^I 는 탭키 한 번을 의미, $ 는 라인의 마지막을 의미

#awk  '{print  NR, $1, $3}' employees
NR : 하나의 레코드(행)를 처리한 후 1이 증가하는 변수
소문자 nr 은 안 됨

#awk  '{print $1, $3, NF}'  employees
NF : 필드(라인의 각 항목)의 갯수 출력시키는 변수

#awk  -F  '[\t]'  '$1 ~ /[bB]ill/'  employees
---> 첫번째 항목(필드,field)에 bill 또는 Bill 이 존재하는지 검사(~)
-F '[\t]' 는 항목 구분을 탭키로 구분하라는 의미(대괄호 생략 가능)
(-F 옵션 생략시 공백이나 탭키로 항목을 구분 함)

-F ---> field separator 지정 옵션
~ ---> 패턴 매칭 연산자

#awk  '$1 !~ /ly$/'  employees
---> 첫번째 필드(항목)가 ly 로 끝나지 않은(!~) 행들


응용 예)
df // disk free, 하드디스크 파티션별 용량 확인 명령
-h 킬로바이트, 메가바이트, 기가바이트로 출력 시키는 옵션

#df  -h  |  sort  |  head  -2  |  awk  '{print  $6, $5}'

▷/dev/null 특수 파일

#man  null
#echo  hi
#echo  hi  >  /dev/null


▣실습
1. /doc 디렉토리 생성하기 
2. 리다이렉션 이용하여 /work 디렉토리에 menu.txt 파일 생성하기
menu.txt 의 내용)
apple
orange
mango
3. find 명령 이용하여 최상위 디렉토리(/) 부터 검색하여 
menu.txt 를 찾은 후 /doc/menu2.txt  로 복사하기
4. Putty 이용하여 apple 계정으로 로그인하기
5. find 이용하여 / 부터 menu.txt 파일을 찾아서
apple 홈디렉토리(/home/apple)에 find.txt 로 저장하고 
에러메시지(허가 거부 됨 메시지)는 /dev/null 로 보내기

(1번 ~ 3번 은 루트 계정으로 실습)
(5번은 apple 계정으로 로그인해서 실습)


/////////////////////////////////////////////////////////////////////
#mkdir  /doc
#cat > /work/menu.txt
apple
orange
mango
#find  /  -name  menu.txt  -exec  cp  {}  /doc/menu2.txt  \;

$find  /  -name  menu.txt  >  find.txt  2>  /dev/null
/////////////////////////////////////////////////////////////////////









