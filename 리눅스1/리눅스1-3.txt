
[ITBANK Andylec 주말 리눅스 1 과정]

▣오늘의 수업내용(3일차)
VI(편집기)
Shell(쉘)


▣vi
vi(visual editor) : 
-리눅스나 유닉스에서 일반적으로 사용하는 텍스트 편집기
-자체 윈도우가 있는 것이 아니라 터미널에서 실행 됨
-메뉴가 없다.


☞vi 는 세가지 상태(모드,Mode)가 있다.
1) 명령상태 또는 esc 상태
2) 입력상태 또는 편집 상태
3) ex상태 또는 :(콜론) 상태 또는 실행 상태

#cd
#pwd
/root
#vi

vi 를 실행하면 처음상태가 명령상태이다. 키보드 입력이 하나의 
명령으로 동작한다.

i(insert) 나 a(append) 를 누르면 입력상태로 전환된다. 
왼쪽하단에 -끼워넣기- 또는 -INSERT- 로 표시됨

다시 명령상태로 전환하려면 esc 키를 누르면 된다.

ex 상태는 콜론(:) 으로 시작하는 상태를 말한다.
:set  nu   ---> 라인번호 출력
:set  nonu ---> 라인번호 해제


처음 vi 를 실행하면 명령상태 이므로 아래 문자키를 입력하여
입력상태로 만들고 입력을 하게 된다.

☞입력상태 설명
i    // 현재 커서 앞쪽에 입력
a   // 현재 커서 뒤쪽에 입력
I    // 현재 라인 처음에 입력(라인이 공백으로 시작하면 실제 단어 앞에 입력 됨)
A   // 현재 라인 마지막에 입력
o   // 현재 라인 아래에 새로운 줄을 만들고 입력
O  // 현재 라인 위쪽에 새로운 줄을 만들고 입력
s   //  현재 커서의 글자 삭제후 입력
S   //  현재 라인 삭제후 입력



명령상태로 바꾸려면 esc 키를 누르면 된다.
(왼쪽 하단에 -끼워넣기- 또는 -INSERT- 가 표시되면 입력상태, 
없으면 명령상태이다.)


☞삭제(esc 키를 눌러서 명령상태에서 입력하는 것임)
x 또는 delete 키      // 현재 커서 문자 한자 삭제
X                         // 현재 커서 앞의 글자 삭제
dd                       // 한 줄 삭제
숫자 + dd             // 현재 커서부터 숫자만큼 행 삭제
d$                       // 현재 커서 부터 현재 라인의 마지막까지 삭제
($는 마지막을 의미)
d0                       // 현재 커서 앞 문자부터 라인의 처음부분까지 삭제
(숫자 0 은 처음을 의미)
d^                      // 현재 커서 앞 문자부터 라인의 처음부분까지 삭제
(^ 는 처음을 의미)
dw                      // 단어 삭제(단어의 첫번째 글자에 커서를 위치 시켜야 함)
u                         // undo, 작업 취소


☞교체(Replace)
r     // 한 자 교체
R    // 여러 글자 교체
cw  // 한 단어 교체(단어의 첫번째 철자에 커서를 위치시켜야 함)
cc   // 한 줄 교체(Change entire line)


☞저장 및 종료 또는 저장하지 않고 종료
명령상태로 바꾼다음(esc 누르기) 아래 명령을 입력
1) :q (저장하지 않고 종료, q ---> quit)
2) :w (파일 저장)
3) :wq (저장후 종료, w ---> write, q ---> quit)

vi 실행시 파일명을 지정하지 않았으면 
리눅스 명령어 상태로 나올 때 저장할 파일명을 입력해야 한다.
:wq  파일명

4) :q!  (저장하지 않고 강제 종료)
5) :wq! (저장후 강제종료)
--->리눅스는 대소문자를 구분함



vi 실행된 상태에서
esc 눌러서 명령 상태 만들고 저장후 빠져 나오기
:wq
---> 파일명이 없다고 출력 됨(No file name)
:wq  test.txt
--->현재 폴더에 test.txt 로 저장후 종료

#ls
#cat  test.txt

#cp  /etc/services  /root/test2.txt
---> /etc 폴더 안의 services 파일을 /root 폴더 안에 test2.txt 로 복사

#vi  test2.txt
:set  nu


☞문자키를 이용한 커서 이동하기(명령상태에서 하기)

	    k(위)
h(왼쪽)            l(오른쪽)
            j(아래)



0(숫자 영)  //행(라인)의 처음으로 이동
$              //행(라인)의 마지막으로 이동

G            //문서의 마지막으로 이동
gg          //문서의 처음으로 이동


33번 라인으로 이동하기
---> 33G 또는 :33 엔터

PgUP, PgDN  //페이지 이동


☞검색
1)위에서 아래로 검색
/검색단어(명령상태에서 / 누르고 검색단어 입력후 엔터)
n 을 누르면 다음 단어로 이동된다.
N 을 누르면 이전 단어로 이동


2)아래에서 위로 검색
?검색단어
n 을 누르면 위 방향으로 계속 찾기
N 을 누르면 아래 방향으로 계속 찾기


☞복사 및 붙여넣기
한줄 복사       //yy (yank)
숫자 + yy       //현재 커서부터 숫자 만큼의 행을 복사
붙여넣기        //p (paste) ---> 현재 라인 아래 줄에 붙여넣기
                    //P(대문자) ----> 현재 라인 윗 줄에 붙여 넣기

☞ex 모드
1)vi 상태에서 리눅스 명령어 실행
:!명령어


:!cal


:.!cal
---> 현재 커서 위치에 리눅스 명령어 결과를 가져오기


2)색상 적용하기
:color  evening
:color  morning
:color  default


:!ls  /usr/share/vim/vim72/colors/
---> 적용할 수 있는 색상 단어 확인(VI 상태)

#ls  /usr/share/vim/vim72/colors/
---> 적용할 수 있는 색상 단어 확인(터미널 상태)

vim 은 vi 를 개선한 프로그램(Vi Improved)

#vim  test.txt

3)split(화면 분할)
:split(수평 분할, 원래 파일 화면)
:vs(수직 분할, 원래 파일 화면)

ctrl + ww ---> 창간의 이동

ctrl + wn ---> 수평분할(빈 화면)
ctrl + wv ---> 수직분할(빈 화면)

:e  파일명 ---> 지정한 파일 열기
:enew ---> 현재 문서를 닫고 새로운 빈문서 열기


☞vi 치환
s ---> search

:1,10s/원래단어/바꿀단어  ---> 1번 라인에서 10번 라인까지 변경
:%s/원래단어/바꿀단어     ---> 파일 전체에서 첫번째 단어만 변경
:%s/원래단어/바꿀단어/g  ---> 파일 전체에서 한 줄의 모든 단어 변경(g 는 global 을 의미)


#vim  linux.txt 
---> vim  저장할파일명
---> ~ 표시는 라인에 아무 내용도 없다는 의미
---> 아래와 같이 입력하기

apple
apple  apple  apple

orange
orange  orange  orange

mango
mango  mango  mango


위와 같이 입력후 
:%s/apple/tico (명령상태에서 입력후 엔터-결과 확인)
:%s/orange/matiz/g

:set  nohls
---> 검색 단어 강조해제

:set  hls
---> 검색 단어 강조


☞VI 설정 파일 사용하기

vi  설정파일 --->  .vimrc
로그인한 계정의 홈디렉토리에 존재해야 한다.
루트의 경우에는 /root 에 존재해야 한다.

#cd
#pwd
/root
#vi  .vimrc
set  nu
color  evening
#vi   test2.txt
라인번호와 색상이 적용되는지 확인


▣실습
1. /root 디렉토리로 이동하기(#cd  /root)
2. vim  이용하여 아래와 같이 입력하고 치환 기능 이용하여 치환 결과 처럼 치환하기
파일명 : test3.txt  (#vim  test3.txt)

입력할 내용)
test.com
test.com  test.com
test.com  test.com  test.com

치환 결과)
yahoo.com
yahoo.com  yahoo.com
yahoo.com  yahoo.com  yahoo.com

3. vim 이용하여  test.html 파일 생성하기
(동일한 내용은 복사해서 붙여넣기 기능 사용)


//파일명 : test.html
<html>
<body>
<h1>Linux 1</h1>
<h2>Linux 2</h2>
<h3>Linux 3</h3>

<input type=text><br>
<input type=text><br>

<input type=password><br>

<input type=radio><br>
<input type=radio><br>
<input type=radio><br>

<input type=checkbox><br>
<input type=checkbox><br>
<input type=checkbox><br>
<input type=checkbox><br>

<hr color=red>
<font color=blue size=5>VI TEST</font>
</body>
</html>


▣리눅스 기본 명령어
1. which
알리아스, 실행파일 경로(위치) 출력

#which  ls


2. alias
명령어 별칭 출력 및 생성(반대는 unalias)
라우터에서 사용하는 것과 유사

#ls  -l
#ll
---> 명령어 alias , ll 은  ls  -l 과 같다.
#alias
---> 미리 설정되어 있는 alias 확인하기


3. echo
화면상에 문자열이나 변수의 값(내용)을 출력
변수의 값을 출력시킬 때는 $ 기호로 시작한다.

#echo  test
#echo  TEST
#echo  $HOME


4. export
환경변수로 만들어 주는 명령어


▣Unix 및 Linux 구조

----------
사용자
----------
Shell
----------
Kernel
----------
H/W
----------


컴퓨터 본체-----커널-----쉘-----사용자


▣용어 정리
1. Kernel(커널)
운영체제의 핵심되는 프로그램(자동차의 엔진 역할)

2. 쉘(shell)
-명령어 해석기(Command Interpreter)
-사용자가 입력한 명령어를 커널(운영체제의 핵심프로그램)이 
이해할 수 있도록 번역해서 전달하고 결과를 사용자에게 
리턴하는 프로그램
-쉘도 하나의 프로그램이며 리눅스로 로그인하여 터미널을 실행하면
쉘이 메모리에 로딩된다.
-원격 접속을 해도 쉘이 메모리로 로딩된다.
-터미널에서 텍스트 명령어를 사용하면 쉘을 이용하게 되는 것이다.

-명령어 대기 상태 : 쉘프롬프트 라고 부른다.
-리눅스 명령어를 쉘명령어 라고도 부른다.



▣쉘변수
-------------
shell(쉘)
-------------
kernel(커널)
-------------
리눅스로 로그인 한 후 터미널 실행했을 때 메모리 상태


/////////////////////////////////////////////////////////////////////
▷쉘 : bash  ksh  csh

▷컴퓨터 바이러스 백신 프로그램 :  알약  V3  네이버백신
/////////////////////////////////////////////////////////////////////


☞변수 : 프로그램(또는 명령어)이 실행될 때 메모리(기억장치)에 
           데이타(자료)를 저장하기 위해 그릇과 같은 임시 기억 장소가
	   만들어 지는데 이를 변수(variable) 라고 한다.

☞환경변수 : 현재 쉘에서 또 다른 쉘이 실행되었을 때
	         상속되는 변수가 환경변수(외부변수)이다.
	         일반 변수(지역변수)는 상속되지 않는다.



※변수정리
변수(지역변수, 로컬변수) : 현재 쉘에서만 사용가능한 변수
환경변수(외부변수, 전역변수) : 현재 쉘에서 다른 쉘을 실행시켰을 때 상속되는 변수


☞변수확인
1)set, declare
---> 변수와 환경변수 모두 출력
형식)
변수이름=값



2)env, printenv
---> 환경변수 만 출력


☞변수생성
변수이름=값
--->변수 이름은 숫자로 시작하면 안되고 영문 또는 _ 만 시작가능
--->중간에 공백이 있으면 안 됨
--->데이타 타입은 지정할 필요 없음
--->변수를 출력 할 때는 echo 명령어를 사용하고 변수이름 앞에 $ 기호 사용


☞변수삭제
unset  변수명
#cd  /work
#echo  $HOME
#unset  HOME
#echo  $HOME
#cd
---> ?

☞주요 환경변수

---------------------------------------------
[/a:/b:/c]      [ ko_KR ]    [ /root ]
PATH 변수    LANG 변수   HOME 변수
---------------------------------------------
메모리상의 쉘 영역

쉘의 메모리 영역에는 변수도 있고 환경변수도 있는데
PATH 가 대표적인 환경변수이다.(--->대문자)

※POSIX : 유닉스 표준을 의미
http://ko.wikipedia.org/wiki/POSIX

--->환경변수는 POSIX 표준에 따라서 대문자


PATH(패스) : 명령어를 탐색하는 경로(디렉토리,폴더) 정보를 저장하고 있는 환경변수	
LANG : 언어 정보 저장
HOME : 로그인한 계정의 홈디렉토리 저장


#echo  $PATH

--->명령어가 실행될 때 쉘에 의해서 패스(PATH) 같은 환경변수가 참조된다.
--->#ls 라고 입력했을 때 실제로는 /bin/ls 실행이 되는데
쉘이 메모리상에서 PATH 변수를 탐색해서 실행을 해 주므로
/bin/ls 라고 입력할 필요가 없다.

#cat  /etc/shells
---> 사용 가능한 쉘 


※알리아스와 환경변수를 터미널에서 추가한 경우 메모리에 저장되므로
리부팅하면 사용할 수가 없음
새로 정의한 알리아스와 환경변수를 계속 사용하려면 쉘설정파일에 등록해 주면 됨

-알리아스는 명령어와 옵션을 을 짧게 지정하여 사용하는 명령어 별칭 기능
-변수는 알리아스 처럼 명령어를 저장할 수도 있고 데이타를 저장하여 사용할 수 도 있다.



▣쉘설정파일
▷bash 
--->리눅스의 디폴트 쉘 프로그램인 배쉬

▷리눅스는 로그인을 하면 메모리에 쉘이 실행 되는데 
/etc/profile, /etc/bashrc 을 먼저 읽고 자신의 
홈디렉토리에서 .bashrc, .bash_profile 을 읽어서 알리아스,
패스(PATH)같은 환경변수를 설정하게 된다.

▷/etc/bashrc, .bashrc 는 터미널을 실행할 때 마다 읽고
/etc/profile, .bash_profile 로그인시 한 번 만 읽는다.

▷/etc 에 있는 쉘설정파일은 모든 사용자에게 적용되는 전체설정 파일이다.
(/etc/profile, /etc/bashrc)





▷bash쉘 사용자 설정파일
1) .bashrc (비-로그인 쉘 설정파일) : 주로 알리아스 등록
2) .bash_profile (로그인 쉘 설정파일) : PATH 같은 환경변수 등록
3) .bash_history : 명령어 기록 파일
4) .bash_logout : 로그아웃시 실행할 명령 기록
--->계정의 홈디렉토리에 존재한다.
--->루트의 경우에는 /root 안에 쉘설정파일이 존재



☞쉘설정 파일 수정 테스트
#cd
#pwd
/root
#vi  .bashrc
마지막 부분에 추가

alias  1='clear'
alias  vi='vim'
alias  shut='shutdown  -h  now'

터미널을 종료후 다시 실행하면 적용 됨
(또는 source 명령 사용)

#cd
#pwd
/root
#vi  .bash_profile
마지막에 추가


net='cd  /etc/sysconfig/network-scripts/'

#source  /root/.bash_profile
#$net
---> 변수 치환이라 함
#pwd

▷변수치환
#C=cal
#$C


▣원격 접속 사용하기

[윈도우 7]-----------가상 네트워크--------[리눅스 가상머신]

Putty, CRT :  원격 접속 터미널 프로그램

리눅스 아이피 확인 : ifconfig
현재 접속자 확인 : who
현재 사용자 확인 : whoami , who am i


▷Putty 사용하기


▣실습
1. touch 명령어를 MYTOUCH 변수에 대입
2. /work/linuxtest.txt 를 DEST 변수에 대입
3. 만들어진 변수를 이용하여  /work/linuxtest.txt 파일 생성하기
4. shutdown  -r  now 를 shutr 으로 알리아스 설정하기
5. shutr 입력하여 테스트
6. #en 을 입력하면 영문으로 설정되도록 알리아스 설정
7. Putty 이용하여 apple 로그인하고 PATH 변수에 /bin , /usr/bin 폴더만 설정(ifconfig 실행 확인)


※BASH 쉘 환경변수
HISTFILE  // 명령어 히스토리를 저장할 파일 이름, 기본값은 ~/.bash_history
PWD       // 현재 작업 디렉토리
SHELL     // 현재 사용되어지고 있는 쉘
UID        // 현재 사용자의 UID(유저 번호)


/////////////////////////////////////////////////////////////////////
#MYTOUCH=touch
또는
#which  touch
/bin/touch
#MYTOUCH=/bin/touch


#mkdir  /work
#DEST=/work/linuxtest.txt
---> 변수 생성할 때는 $ 기호 가 필요 없음

#$MYTOUCH  $DEST
--->#touch  /work/linuxtest.txt
#ls  /work

#alias  shutr='shutdown  -r  now'
#shutr

#alias  en='LANG=en_US.UTF-8'
#en
#cp

apple 로그인
[apple@linux1 ~]$ PATH=/bin:/usr/bin
[apple@linux1 ~]$ ifconfig


/////////////////////////////////////////////////////////////////////



